
biye_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b50  08003b50  00030022  2**0
                  CONTENTS
  4 .ARM          00000000  08003b50  08003b50  00030022  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b50  08003b50  00030022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000680  20000000  08003b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005634  20000680  080041d8  00020680  2**5
                  ALLOC
 10 ._user_heap_stack 00002204  20005cb4  080041d8  00025cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030022  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0cd  00000000  00000000  0003004b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d59  00000000  00000000  0003e118  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000528  00000000  00000000  00040478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024ad  00000000  00000000  000409a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d21  00000000  00000000  00042e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007807c  00000000  00000000  0004ab6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001788  00000000  00000000  000c2c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .exram_start  00000020  68000000  68000000  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 22 .exram_end    00000002  68000020  68000020  00030020  2**2
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000680 	.word	0x20000680
 8000204:	00000000 	.word	0x00000000
 8000208:	08003a84 	.word	0x08003a84

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000684 	.word	0x20000684
 8000224:	08003a84 	.word	0x08003a84

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_frsub>:
 8000a04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a08:	e002      	b.n	8000a10 <__addsf3>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fsub>:
 8000a0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a10 <__addsf3>:
 8000a10:	0042      	lsls	r2, r0, #1
 8000a12:	bf1f      	itttt	ne
 8000a14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a18:	ea92 0f03 	teqne	r2, r3
 8000a1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a24:	d06a      	beq.n	8000afc <__addsf3+0xec>
 8000a26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a2e:	bfc1      	itttt	gt
 8000a30:	18d2      	addgt	r2, r2, r3
 8000a32:	4041      	eorgt	r1, r0
 8000a34:	4048      	eorgt	r0, r1
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	2b19      	cmp	r3, #25
 8000a3e:	bf88      	it	hi
 8000a40:	4770      	bxhi	lr
 8000a42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4249      	negne	r1, r1
 8000a62:	ea92 0f03 	teq	r2, r3
 8000a66:	d03f      	beq.n	8000ae8 <__addsf3+0xd8>
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a70:	eb10 000c 	adds.w	r0, r0, ip
 8000a74:	f1c3 0320 	rsb	r3, r3, #32
 8000a78:	fa01 f103 	lsl.w	r1, r1, r3
 8000a7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__addsf3+0x78>
 8000a82:	4249      	negs	r1, r1
 8000a84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a8c:	d313      	bcc.n	8000ab6 <__addsf3+0xa6>
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a92:	d306      	bcc.n	8000aa2 <__addsf3+0x92>
 8000a94:	0840      	lsrs	r0, r0, #1
 8000a96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9a:	f102 0201 	add.w	r2, r2, #1
 8000a9e:	2afe      	cmp	r2, #254	; 0xfe
 8000aa0:	d251      	bcs.n	8000b46 <__addsf3+0x136>
 8000aa2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aaa:	bf08      	it	eq
 8000aac:	f020 0001 	biceq.w	r0, r0, #1
 8000ab0:	ea40 0003 	orr.w	r0, r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	eb40 0000 	adc.w	r0, r0, r0
 8000abc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	d1ed      	bne.n	8000aa2 <__addsf3+0x92>
 8000ac6:	fab0 fc80 	clz	ip, r0
 8000aca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ace:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ad6:	bfaa      	itet	ge
 8000ad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000adc:	4252      	neglt	r2, r2
 8000ade:	4318      	orrge	r0, r3
 8000ae0:	bfbc      	itt	lt
 8000ae2:	40d0      	lsrlt	r0, r2
 8000ae4:	4318      	orrlt	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	f092 0f00 	teq	r2, #0
 8000aec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af0:	bf06      	itte	eq
 8000af2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000af6:	3201      	addeq	r2, #1
 8000af8:	3b01      	subne	r3, #1
 8000afa:	e7b5      	b.n	8000a68 <__addsf3+0x58>
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d021      	beq.n	8000b50 <__addsf3+0x140>
 8000b0c:	ea92 0f03 	teq	r2, r3
 8000b10:	d004      	beq.n	8000b1c <__addsf3+0x10c>
 8000b12:	f092 0f00 	teq	r2, #0
 8000b16:	bf08      	it	eq
 8000b18:	4608      	moveq	r0, r1
 8000b1a:	4770      	bx	lr
 8000b1c:	ea90 0f01 	teq	r0, r1
 8000b20:	bf1c      	itt	ne
 8000b22:	2000      	movne	r0, #0
 8000b24:	4770      	bxne	lr
 8000b26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b2a:	d104      	bne.n	8000b36 <__addsf3+0x126>
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b3a:	bf3c      	itt	cc
 8000b3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bxcc	lr
 8000b42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b54:	bf16      	itet	ne
 8000b56:	4608      	movne	r0, r1
 8000b58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b5c:	4601      	movne	r1, r0
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	bf06      	itte	eq
 8000b62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b66:	ea90 0f01 	teqeq	r0, r1
 8000b6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_ui2f>:
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e004      	b.n	8000b80 <__aeabi_i2f+0x8>
 8000b76:	bf00      	nop

08000b78 <__aeabi_i2f>:
 8000b78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	ea5f 0c00 	movs.w	ip, r0
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	e01c      	b.n	8000bce <__aeabi_l2f+0x2a>

08000b94 <__aeabi_ul2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <__aeabi_l2f+0x14>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_l2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__aeabi_l2f+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	ea5f 0c01 	movs.w	ip, r1
 8000bbc:	bf02      	ittt	eq
 8000bbe:	4684      	moveq	ip, r0
 8000bc0:	4601      	moveq	r1, r0
 8000bc2:	2000      	moveq	r0, #0
 8000bc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc8:	bf08      	it	eq
 8000bca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bd2:	fabc f28c 	clz	r2, ip
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bdc:	db10      	blt.n	8000c00 <__aeabi_l2f+0x5c>
 8000bde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be2:	4463      	add	r3, ip
 8000be4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be8:	f1c2 0220 	rsb	r2, r2, #32
 8000bec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf4:	eb43 0002 	adc.w	r0, r3, r2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f102 0220 	add.w	r2, r2, #32
 8000c04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c10:	fa21 f202 	lsr.w	r2, r1, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_fmul>:
 8000c20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c28:	bf1e      	ittt	ne
 8000c2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c2e:	ea92 0f0c 	teqne	r2, ip
 8000c32:	ea93 0f0c 	teqne	r3, ip
 8000c36:	d06f      	beq.n	8000d18 <__aeabi_fmul+0xf8>
 8000c38:	441a      	add	r2, r3
 8000c3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c3e:	0240      	lsls	r0, r0, #9
 8000c40:	bf18      	it	ne
 8000c42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c46:	d01e      	beq.n	8000c86 <__aeabi_fmul+0x66>
 8000c48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c54:	fba0 3101 	umull	r3, r1, r0, r1
 8000c58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c60:	bf3e      	ittt	cc
 8000c62:	0049      	lslcc	r1, r1, #1
 8000c64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c68:	005b      	lslcc	r3, r3, #1
 8000c6a:	ea40 0001 	orr.w	r0, r0, r1
 8000c6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c72:	2afd      	cmp	r2, #253	; 0xfd
 8000c74:	d81d      	bhi.n	8000cb2 <__aeabi_fmul+0x92>
 8000c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c8e:	bf08      	it	eq
 8000c90:	0249      	lsleq	r1, r1, #9
 8000c92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c9a:	3a7f      	subs	r2, #127	; 0x7f
 8000c9c:	bfc2      	ittt	gt
 8000c9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ca2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ca6:	4770      	bxgt	lr
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	dc5d      	bgt.n	8000d70 <__aeabi_fmul+0x150>
 8000cb4:	f112 0f19 	cmn.w	r2, #25
 8000cb8:	bfdc      	itt	le
 8000cba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bxle	lr
 8000cc0:	f1c2 0200 	rsb	r2, r2, #0
 8000cc4:	0041      	lsls	r1, r0, #1
 8000cc6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cca:	f1c2 0220 	rsb	r2, r2, #32
 8000cce:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cd6:	f140 0000 	adc.w	r0, r0, #0
 8000cda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cde:	bf08      	it	eq
 8000ce0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce4:	4770      	bx	lr
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0040      	lsleq	r0, r0, #1
 8000cf2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cf6:	3a01      	subeq	r2, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xce>
 8000cfa:	ea40 000c 	orr.w	r0, r0, ip
 8000cfe:	f093 0f00 	teq	r3, #0
 8000d02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0049      	lsleq	r1, r1, #1
 8000d0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d0e:	3b01      	subeq	r3, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xe6>
 8000d12:	ea41 010c 	orr.w	r1, r1, ip
 8000d16:	e78f      	b.n	8000c38 <__aeabi_fmul+0x18>
 8000d18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	bf18      	it	ne
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d00a      	beq.n	8000d3e <__aeabi_fmul+0x11e>
 8000d28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d2c:	bf18      	it	ne
 8000d2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d32:	d1d8      	bne.n	8000ce6 <__aeabi_fmul+0xc6>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	bf17      	itett	ne
 8000d44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d48:	4608      	moveq	r0, r1
 8000d4a:	f091 0f00 	teqne	r1, #0
 8000d4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d52:	d014      	beq.n	8000d7e <__aeabi_fmul+0x15e>
 8000d54:	ea92 0f0c 	teq	r2, ip
 8000d58:	d101      	bne.n	8000d5e <__aeabi_fmul+0x13e>
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	d10f      	bne.n	8000d7e <__aeabi_fmul+0x15e>
 8000d5e:	ea93 0f0c 	teq	r3, ip
 8000d62:	d103      	bne.n	8000d6c <__aeabi_fmul+0x14c>
 8000d64:	024b      	lsls	r3, r1, #9
 8000d66:	bf18      	it	ne
 8000d68:	4608      	movne	r0, r1
 8000d6a:	d108      	bne.n	8000d7e <__aeabi_fmul+0x15e>
 8000d6c:	ea80 0001 	eor.w	r0, r0, r1
 8000d70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bx	lr
 8000d7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fdiv>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d069      	beq.n	8000e74 <__aeabi_fdiv+0xec>
 8000da0:	eba2 0203 	sub.w	r2, r2, r3
 8000da4:	ea80 0c01 	eor.w	ip, r0, r1
 8000da8:	0249      	lsls	r1, r1, #9
 8000daa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dae:	d037      	beq.n	8000e20 <__aeabi_fdiv+0x98>
 8000db0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000db4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	bf38      	it	cc
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	bf24      	itt	cs
 8000dd2:	1a5b      	subcs	r3, r3, r1
 8000dd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ddc:	bf24      	itt	cs
 8000dde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000de2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000de6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dea:	bf24      	itt	cs
 8000dec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000df0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000df4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df8:	bf24      	itt	cs
 8000dfa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dfe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	bf18      	it	ne
 8000e06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e0a:	d1e0      	bne.n	8000dce <__aeabi_fdiv+0x46>
 8000e0c:	2afd      	cmp	r2, #253	; 0xfd
 8000e0e:	f63f af50 	bhi.w	8000cb2 <__aeabi_fmul+0x92>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e18:	bf08      	it	eq
 8000e1a:	f020 0001 	biceq.w	r0, r0, #1
 8000e1e:	4770      	bx	lr
 8000e20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e28:	327f      	adds	r2, #127	; 0x7f
 8000e2a:	bfc2      	ittt	gt
 8000e2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e34:	4770      	bxgt	lr
 8000e36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	3a01      	subs	r2, #1
 8000e40:	e737      	b.n	8000cb2 <__aeabi_fmul+0x92>
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xc2>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xda>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e795      	b.n	8000da0 <__aeabi_fdiv+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d108      	bne.n	8000e90 <__aeabi_fdiv+0x108>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	f47f af7d 	bne.w	8000d7e <__aeabi_fmul+0x15e>
 8000e84:	ea93 0f0c 	teq	r3, ip
 8000e88:	f47f af70 	bne.w	8000d6c <__aeabi_fmul+0x14c>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e776      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000e90:	ea93 0f0c 	teq	r3, ip
 8000e94:	d104      	bne.n	8000ea0 <__aeabi_fdiv+0x118>
 8000e96:	024b      	lsls	r3, r1, #9
 8000e98:	f43f af4c 	beq.w	8000d34 <__aeabi_fmul+0x114>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e76e      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1ca      	bne.n	8000e42 <__aeabi_fdiv+0xba>
 8000eac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000eb0:	f47f af5c 	bne.w	8000d6c <__aeabi_fmul+0x14c>
 8000eb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb8:	f47f af3c 	bne.w	8000d34 <__aeabi_fmul+0x114>
 8000ebc:	e75f      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_f2uiz>:
 8000ec0:	0042      	lsls	r2, r0, #1
 8000ec2:	d20e      	bcs.n	8000ee2 <__aeabi_f2uiz+0x22>
 8000ec4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ec8:	d30b      	bcc.n	8000ee2 <__aeabi_f2uiz+0x22>
 8000eca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ece:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ed2:	d409      	bmi.n	8000ee8 <__aeabi_f2uiz+0x28>
 8000ed4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000edc:	fa23 f002 	lsr.w	r0, r3, r2
 8000ee0:	4770      	bx	lr
 8000ee2:	f04f 0000 	mov.w	r0, #0
 8000ee6:	4770      	bx	lr
 8000ee8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_f2uiz+0x32>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d102      	bne.n	8000ef8 <__aeabi_f2uiz+0x38>
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef6:	4770      	bx	lr
 8000ef8:	f04f 0000 	mov.w	r0, #0
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <JTAG_Set>:
//mode:jtag,swd模式设置;00,全使能;01,使能SWD;10,全关闭;
//#define JTAG_SWD_DISABLE   0X02
//#define SWD_ENABLE         0X01
//#define JTAG_SWD_ENABLE    0X00
void JTAG_Set(uint8_t mode)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	uint32_t temp;
	temp=mode;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	60fb      	str	r3, [r7, #12]
	temp<<=25;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	065b      	lsls	r3, r3, #25
 8000f12:	60fb      	str	r3, [r7, #12]
	RCC->APB2ENR|=1<<0;     //开启辅助时钟
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <JTAG_Set+0x44>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <JTAG_Set+0x44>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6193      	str	r3, [r2, #24]
	AFIO->MAPR&=0XF8FFFFFF; //清除MAPR的[26:24]
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <JTAG_Set+0x48>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <JTAG_Set+0x48>)
 8000f26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f2a:	6053      	str	r3, [r2, #4]
	AFIO->MAPR|=temp;       //设置jtag模式
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <JTAG_Set+0x48>)
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	4905      	ldr	r1, [pc, #20]	; (8000f48 <JTAG_Set+0x48>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	604b      	str	r3, [r1, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000

08000f4c <sysTick_Set>:

void sysTick_Set(){
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	SysTick->CTRL |= 0x07;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <sysTick_Set+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <sysTick_Set+0x20>)
 8000f56:	f043 0307 	orr.w	r3, r3, #7
 8000f5a:	6013      	str	r3, [r2, #0]
	SysTick->LOAD = 72000;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <sysTick_Set+0x20>)
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <sysTick_Set+0x24>)
 8000f60:	605a      	str	r2, [r3, #4]
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010
 8000f70:	00011940 	.word	0x00011940

08000f74 <MY_NVIC_SetVectorTable>:

//设置向量表偏移地址
//NVIC_VectTab:基址
//Offset:偏移量
void MY_NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	SCB->VTOR = NVIC_VectTab|(Offset & (uint32_t)0x1FFFFF80);//设置NVIC的向量表偏移寄存器
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000f84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f88:	4904      	ldr	r1, [pc, #16]	; (8000f9c <MY_NVIC_SetVectorTable+0x28>)
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	608b      	str	r3, [r1, #8]
	//用于标识向量表是在CODE区还是在RAM区
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MYRCC_DeInit>:

void MYRCC_DeInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
 	RCC->APB1RSTR = 0x00000000;//复位结束
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
	RCC->APB2RSTR = 0x00000000;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]

  	RCC->AHBENR = 0x00000014;  //睡眠模式闪存和SRAM时钟使能.其他关闭.
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fb2:	2214      	movs	r2, #20
 8000fb4:	615a      	str	r2, [r3, #20]
  	RCC->APB2ENR = 0x00000000; //外设时钟关闭.
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  	RCC->APB1ENR = 0x00000000;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
	RCC->CR |= 0x00000001;     //使能内部高速时钟HSION
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= 0xF8FF0000;   //复位SW[1:0],HPRE[3:0],PPRE1[2:0],PPRE2[2:0],ADCPRE[1:0],MCO[2:0]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4911      	ldr	r1, [pc, #68]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MYRCC_DeInit+0x7c>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
	RCC->CR &= 0xFEF6FFFF;     //复位HSEON,CSSON,PLLON
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fe0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
	RCC->CR &= 0xFFFBFFFF;     //复位HSEBYP
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MYRCC_DeInit+0x78>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <MYRCC_DeInit+0x78>)
 8000ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= 0xFF80FFFF;   //复位PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MYRCC_DeInit+0x78>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <MYRCC_DeInit+0x78>)
 8000ffc:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001000:	6053      	str	r3, [r2, #4]
	RCC->CIR = 0x00000000;     //关闭所有中断
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <MYRCC_DeInit+0x78>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
	//配置向量表
#ifdef  VECT_TAB_RAM
	MY_NVIC_SetVectorTable(0x20000000, 0x0);
#else
	MY_NVIC_SetVectorTable(0x08000000,0x0);
 8001008:	2100      	movs	r1, #0
 800100a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800100e:	f7ff ffb1 	bl	8000f74 <MY_NVIC_SetVectorTable>
#endif
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	f8ff0000 	.word	0xf8ff0000

08001020 <RCC_INIT>:

void RCC_INIT(uint8_t PLL){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	unsigned char temp=0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
	MYRCC_DeInit();		  //复位并配置向量表
 800102e:	f7ff ffb7 	bl	8000fa0 <MYRCC_DeInit>
 	RCC->CR|=0x00010000;  //外部高速时钟使能HSEON
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <RCC_INIT+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <RCC_INIT+0xa4>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR>>17));//等待外部时钟就绪
 800103e:	bf00      	nop
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <RCC_INIT+0xa4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0c5b      	lsrs	r3, r3, #17
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0fa      	beq.n	8001040 <RCC_INIT+0x20>
	RCC->CFGR=0X00000400; //APB1=DIV2;APB2=DIV1;AHB=DIV1;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <RCC_INIT+0xa4>)
 800104c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001050:	605a      	str	r2, [r3, #4]
	PLL-=2;				  //抵消2个单位（因为是从2开始的，设置0就是2）
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3b02      	subs	r3, #2
 8001056:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR|=PLL<<18;   //设置PLL值 2~16
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <RCC_INIT+0xa4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	0492      	lsls	r2, r2, #18
 8001060:	4611      	mov	r1, r2
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <RCC_INIT+0xa4>)
 8001064:	430b      	orrs	r3, r1
 8001066:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=1<<16;	  //PLLSRC ON
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <RCC_INIT+0xa4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <RCC_INIT+0xa4>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6053      	str	r3, [r2, #4]
	FLASH->ACR|=0x32;	  //FLASH 2个延时周期
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <RCC_INIT+0xa8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <RCC_INIT+0xa8>)
 800107a:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 800107e:	6013      	str	r3, [r2, #0]
	RCC->CR|=0x01000000;  //PLLON
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <RCC_INIT+0xa4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <RCC_INIT+0xa4>)
 8001086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR>>25));//等待PLL锁定
 800108c:	bf00      	nop
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <RCC_INIT+0xa4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0e5b      	lsrs	r3, r3, #25
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0fa      	beq.n	800108e <RCC_INIT+0x6e>
	RCC->CFGR|=0x00000002;//PLL作为系统时钟
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <RCC_INIT+0xa4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <RCC_INIT+0xa4>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	6053      	str	r3, [r2, #4]
	while(temp!=0x02)     //等待PLL作为系统时钟设置成功
 80010a4:	e007      	b.n	80010b6 <RCC_INIT+0x96>
	{
		temp=RCC->CFGR>>2;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <RCC_INIT+0xa4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	73fb      	strb	r3, [r7, #15]
		temp&=0x03;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	73fb      	strb	r3, [r7, #15]
	while(temp!=0x02)     //等待PLL作为系统时钟设置成功
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d1f4      	bne.n	80010a6 <RCC_INIT+0x86>
	}
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40022000 	.word	0x40022000

080010cc <FSMC_LCD_INIT>:

void FSMC_LCD_INIT(){
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 80010d0:	4b64      	ldr	r3, [pc, #400]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	4a63      	ldr	r2, [pc, #396]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 80010dc:	4b61      	ldr	r3, [pc, #388]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a60      	ldr	r2, [pc, #384]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 80010e8:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a5d      	ldr	r2, [pc, #372]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 80010f4:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <FSMC_LCD_INIT+0x198>)
 80010fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fe:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 8001100:	4b58      	ldr	r3, [pc, #352]	; (8001264 <FSMC_LCD_INIT+0x198>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a57      	ldr	r2, [pc, #348]	; (8001264 <FSMC_LCD_INIT+0x198>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110a:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 800110c:	4b56      	ldr	r3, [pc, #344]	; (8001268 <FSMC_LCD_INIT+0x19c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a55      	ldr	r2, [pc, #340]	; (8001268 <FSMC_LCD_INIT+0x19c>)
 8001112:	f023 030f 	bic.w	r3, r3, #15
 8001116:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 8001118:	4b53      	ldr	r3, [pc, #332]	; (8001268 <FSMC_LCD_INIT+0x19c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a52      	ldr	r2, [pc, #328]	; (8001268 <FSMC_LCD_INIT+0x19c>)
 800111e:	f043 0303 	orr.w	r3, r3, #3
 8001122:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x01;
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <FSMC_LCD_INIT+0x19c>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <FSMC_LCD_INIT+0x19c>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	60d3      	str	r3, [r2, #12]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 8001130:	4b4e      	ldr	r3, [pc, #312]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	494d      	ldr	r1, [pc, #308]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 8001136:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <FSMC_LCD_INIT+0x1a4>)
 8001138:	4013      	ands	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	494a      	ldr	r1, [pc, #296]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <FSMC_LCD_INIT+0x1a8>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a47      	ldr	r2, [pc, #284]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 800114e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001152:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a44      	ldr	r2, [pc, #272]	; (800126c <FSMC_LCD_INIT+0x1a0>)
 800115a:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 800115e:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 8001160:	4b45      	ldr	r3, [pc, #276]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4b44      	ldr	r3, [pc, #272]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 800116a:	4b43      	ldr	r3, [pc, #268]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a42      	ldr	r2, [pc, #264]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 8001170:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8001174:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 8001176:	4b40      	ldr	r3, [pc, #256]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a3f      	ldr	r2, [pc, #252]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 800117c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001180:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a3c      	ldr	r2, [pc, #240]	; (8001278 <FSMC_LCD_INIT+0x1ac>)
 8001188:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 800118c:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4a3a      	ldr	r2, [pc, #232]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 8001194:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001198:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a37      	ldr	r2, [pc, #220]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 80011a0:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 80011a4:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a34      	ldr	r2, [pc, #208]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 80011ac:	f023 030f 	bic.w	r3, r3, #15
 80011b0:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a31      	ldr	r2, [pc, #196]	; (800127c <FSMC_LCD_INIT+0x1b0>)
 80011b8:	f043 030b 	orr.w	r3, r3, #11
 80011bc:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 80011be:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 80011c6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <FSMC_LCD_INIT+0x1b4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 80011d4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e2:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 80011e4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 80011f4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 8001204:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001208:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 8001210:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 8001220:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800122a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800122e:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <FSMC_LCD_INIT+0x1b4>)
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <FSMC_LCD_INIT+0x1b4>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <FSMC_LCD_INIT+0x1b4>)
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <FSMC_LCD_INIT+0x1b4>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <FSMC_LCD_INIT+0x1b4>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <FSMC_LCD_INIT+0x1b4>)
 8001246:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800124a:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 800124c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6193      	str	r3, [r2, #24]

}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010c00 	.word	0x40010c00
 800126c:	40011400 	.word	0x40011400
 8001270:	00fff000 	.word	0x00fff000
 8001274:	bb000bbb 	.word	0xbb000bbb
 8001278:	40011800 	.word	0x40011800
 800127c:	40012000 	.word	0x40012000
 8001280:	a0000104 	.word	0xa0000104

08001284 <delay_us>:
//		}
//	}
//
//}

void delay_us(uint32_t t){
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	__asm(	"mov r1, r0\n"
 800128c:	4601      	mov	r1, r0
 800128e:	f04f 0207 	mov.w	r2, #7
 8001292:	fb01 f002 	mul.w	r0, r1, r2
 8001296:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 800129a:	4408      	add	r0, r1
 800129c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80012a0:	4408      	add	r0, r1

080012a2 <loop>:
 80012a2:	3801      	subs	r0, #1
 80012a4:	d1fd      	bne.n	80012a2 <loop>
			"add r0, r0, r1\n"
			"loop:\n"
			"subs r0, r0, #1\n"
			"bne loop\n"
		);
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <delay_ms>:

void delay_ms(uint16_t delay_val){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay_val);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fb93 	bl	80039e8 <HAL_Delay>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <LCD_WR_REG>:

#define LCD_REG (uint16_t *)((0x6C000000 | 0x000007FE)+0)
#define LCD_DAT (uint16_t *)((0x6C000000 | 0x000007FE)+2)

void LCD_WR_REG(uint16_t regval){
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
	*(LCD_REG)=regval;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <LCD_WR_REG+0x1c>)
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	8013      	strh	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	6c0007fe 	.word	0x6c0007fe

080012ec <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t datval){
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	*(LCD_DAT)=datval;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <LCD_WR_DATA+0x1c>)
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	8013      	strh	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	6c000800 	.word	0x6c000800

0800130c <LCD_WriteReg>:

void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	80fb      	strh	r3, [r7, #6]
 8001318:	4613      	mov	r3, r2
 800131a:	80bb      	strh	r3, [r7, #4]
	*(LCD_REG) = LCD_Reg;
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <LCD_WriteReg+0x28>)
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	8013      	strh	r3, [r2, #0]
	*(LCD_DAT) = LCD_RegValue;
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <LCD_WriteReg+0x2c>)
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	8013      	strh	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	6c0007fe 	.word	0x6c0007fe
 8001338:	6c000800 	.word	0x6c000800

0800133c <LCD_SetXY>:
	LCD_WR_REG(0x2c);
	LCD_WR_DATA(RGB_Code);
}


void LCD_SetXY(uint16_t x, uint16_t y){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	4613      	mov	r3, r2
 800134a:	80bb      	strh	r3, [r7, #4]
	uint16_t x_l=x;
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	81fb      	strh	r3, [r7, #14]
	uint16_t x_h=(x>>8);
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	81bb      	strh	r3, [r7, #12]

	uint16_t y_l=y;
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	817b      	strh	r3, [r7, #10]
	uint16_t y_h=(y>>8);
 800135a:	88bb      	ldrh	r3, [r7, #4]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	813b      	strh	r3, [r7, #8]

	LCD_WR_REG(0x2a);
 8001360:	202a      	movs	r0, #42	; 0x2a
 8001362:	f7ff ffb3 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(x_h);
 8001366:	89bb      	ldrh	r3, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffbf 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(x_l);
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ffbb 	bl	80012ec <LCD_WR_DATA>

	LCD_WR_REG(0x2b);
 8001376:	202b      	movs	r0, #43	; 0x2b
 8001378:	f7ff ffa8 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(y_h);
 800137c:	893b      	ldrh	r3, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffb4 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(y_l);
 8001384:	897b      	ldrh	r3, [r7, #10]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ffb0 	bl	80012ec <LCD_WR_DATA>

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <LCD_Init>:

void LCD_DIR(){

}

void LCD_Init(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

	FSMC_LCD_INIT();
 8001398:	f7ff fe98 	bl	80010cc <FSMC_LCD_INIT>

	LCD_WR_REG(0xCF);
 800139c:	20cf      	movs	r0, #207	; 0xcf
 800139e:	f7ff ff95 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ffa2 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80013a8:	20c1      	movs	r0, #193	; 0xc1
 80013aa:	f7ff ff9f 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80013ae:	2030      	movs	r0, #48	; 0x30
 80013b0:	f7ff ff9c 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80013b4:	20ed      	movs	r0, #237	; 0xed
 80013b6:	f7ff ff89 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80013ba:	2064      	movs	r0, #100	; 0x64
 80013bc:	f7ff ff96 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f7ff ff93 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80013c6:	2012      	movs	r0, #18
 80013c8:	f7ff ff90 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80013cc:	2081      	movs	r0, #129	; 0x81
 80013ce:	f7ff ff8d 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80013d2:	20e8      	movs	r0, #232	; 0xe8
 80013d4:	f7ff ff7a 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80013d8:	2085      	movs	r0, #133	; 0x85
 80013da:	f7ff ff87 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013de:	2010      	movs	r0, #16
 80013e0:	f7ff ff84 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80013e4:	207a      	movs	r0, #122	; 0x7a
 80013e6:	f7ff ff81 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80013ea:	20cb      	movs	r0, #203	; 0xcb
 80013ec:	f7ff ff6e 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80013f0:	2039      	movs	r0, #57	; 0x39
 80013f2:	f7ff ff7b 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80013f6:	202c      	movs	r0, #44	; 0x2c
 80013f8:	f7ff ff78 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff ff75 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001402:	2034      	movs	r0, #52	; 0x34
 8001404:	f7ff ff72 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff ff6f 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800140e:	20f7      	movs	r0, #247	; 0xf7
 8001410:	f7ff ff5c 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001414:	2020      	movs	r0, #32
 8001416:	f7ff ff69 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800141a:	20ea      	movs	r0, #234	; 0xea
 800141c:	f7ff ff56 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff63 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff ff60 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800142c:	20c0      	movs	r0, #192	; 0xc0
 800142e:	f7ff ff4d 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001432:	201b      	movs	r0, #27
 8001434:	f7ff ff5a 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001438:	20c1      	movs	r0, #193	; 0xc1
 800143a:	f7ff ff47 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff ff54 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001444:	20c5      	movs	r0, #197	; 0xc5
 8001446:	f7ff ff41 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800144a:	2030      	movs	r0, #48	; 0x30
 800144c:	f7ff ff4e 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001450:	2030      	movs	r0, #48	; 0x30
 8001452:	f7ff ff4b 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001456:	20c7      	movs	r0, #199	; 0xc7
 8001458:	f7ff ff38 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800145c:	20b7      	movs	r0, #183	; 0xb7
 800145e:	f7ff ff45 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001462:	2036      	movs	r0, #54	; 0x36
 8001464:	f7ff ff32 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 8001468:	2048      	movs	r0, #72	; 0x48
 800146a:	f7ff ff3f 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800146e:	203a      	movs	r0, #58	; 0x3a
 8001470:	f7ff ff2c 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001474:	2055      	movs	r0, #85	; 0x55
 8001476:	f7ff ff39 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800147a:	20b1      	movs	r0, #177	; 0xb1
 800147c:	f7ff ff26 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff ff33 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001486:	201a      	movs	r0, #26
 8001488:	f7ff ff30 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800148c:	20b6      	movs	r0, #182	; 0xb6
 800148e:	f7ff ff1d 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001492:	200a      	movs	r0, #10
 8001494:	f7ff ff2a 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001498:	20a2      	movs	r0, #162	; 0xa2
 800149a:	f7ff ff27 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800149e:	20f2      	movs	r0, #242	; 0xf2
 80014a0:	f7ff ff14 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff ff21 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80014aa:	2026      	movs	r0, #38	; 0x26
 80014ac:	f7ff ff0e 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff ff1b 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80014b6:	20e0      	movs	r0, #224	; 0xe0
 80014b8:	f7ff ff08 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80014bc:	200f      	movs	r0, #15
 80014be:	f7ff ff15 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80014c2:	202a      	movs	r0, #42	; 0x2a
 80014c4:	f7ff ff12 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80014c8:	2028      	movs	r0, #40	; 0x28
 80014ca:	f7ff ff0f 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80014ce:	2008      	movs	r0, #8
 80014d0:	f7ff ff0c 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80014d4:	200e      	movs	r0, #14
 80014d6:	f7ff ff09 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80014da:	2008      	movs	r0, #8
 80014dc:	f7ff ff06 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80014e0:	2054      	movs	r0, #84	; 0x54
 80014e2:	f7ff ff03 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80014e6:	20a9      	movs	r0, #169	; 0xa9
 80014e8:	f7ff ff00 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80014ec:	2043      	movs	r0, #67	; 0x43
 80014ee:	f7ff fefd 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80014f2:	200a      	movs	r0, #10
 80014f4:	f7ff fefa 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80014f8:	200f      	movs	r0, #15
 80014fa:	f7ff fef7 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fef4 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fef1 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff feee 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff feeb 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001516:	20e1      	movs	r0, #225	; 0xe1
 8001518:	f7ff fed8 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff fee5 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001522:	2015      	movs	r0, #21
 8001524:	f7ff fee2 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001528:	2017      	movs	r0, #23
 800152a:	f7ff fedf 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800152e:	2007      	movs	r0, #7
 8001530:	f7ff fedc 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001534:	2011      	movs	r0, #17
 8001536:	f7ff fed9 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800153a:	2006      	movs	r0, #6
 800153c:	f7ff fed6 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001540:	202b      	movs	r0, #43	; 0x2b
 8001542:	f7ff fed3 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001546:	2056      	movs	r0, #86	; 0x56
 8001548:	f7ff fed0 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800154c:	203c      	movs	r0, #60	; 0x3c
 800154e:	f7ff fecd 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001552:	2005      	movs	r0, #5
 8001554:	f7ff feca 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001558:	2010      	movs	r0, #16
 800155a:	f7ff fec7 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800155e:	200f      	movs	r0, #15
 8001560:	f7ff fec4 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001564:	203f      	movs	r0, #63	; 0x3f
 8001566:	f7ff fec1 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800156a:	203f      	movs	r0, #63	; 0x3f
 800156c:	f7ff febe 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001570:	200f      	movs	r0, #15
 8001572:	f7ff febb 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001576:	202b      	movs	r0, #43	; 0x2b
 8001578:	f7ff fea8 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff feb5 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff feb2 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff feaf 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800158e:	203f      	movs	r0, #63	; 0x3f
 8001590:	f7ff feac 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001594:	202a      	movs	r0, #42	; 0x2a
 8001596:	f7ff fe99 	bl	80012cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fea6 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fea3 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff fea0 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80015ac:	20ef      	movs	r0, #239	; 0xef
 80015ae:	f7ff fe9d 	bl	80012ec <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80015b2:	2011      	movs	r0, #17
 80015b4:	f7ff fe8a 	bl	80012cc <LCD_WR_REG>
	delay_ms(120);
 80015b8:	2078      	movs	r0, #120	; 0x78
 80015ba:	f7ff fe79 	bl	80012b0 <delay_ms>
	LCD_WR_REG(0x29); //display on
 80015be:	2029      	movs	r0, #41	; 0x29
 80015c0:	f7ff fe84 	bl	80012cc <LCD_WR_REG>

	LCD_WriteReg(0x36, 0x08);	//竖屏，扫描方向
 80015c4:	2108      	movs	r1, #8
 80015c6:	2036      	movs	r0, #54	; 0x36
 80015c8:	f7ff fea0 	bl	800130c <LCD_WriteReg>
	LCD_WriteReg(0x03,0x1003);	//坐标
 80015cc:	f241 0103 	movw	r1, #4099	; 0x1003
 80015d0:	2003      	movs	r0, #3
 80015d2:	f7ff fe9b 	bl	800130c <LCD_WriteReg>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}

080015da <drawPoint>:
const Word_Module WordTable[]={
		{"你", },
		{0,},
};

void drawPoint(uint16_t x, uint16_t y, uint16_t color){
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	460b      	mov	r3, r1
 80015e6:	80bb      	strh	r3, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	807b      	strh	r3, [r7, #2]
	LCD_SetXY(x,y);
 80015ec:	88ba      	ldrh	r2, [r7, #4]
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fea2 	bl	800133c <LCD_SetXY>
	LCD_WriteReg(0x2c, color);
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	4619      	mov	r1, r3
 80015fc:	202c      	movs	r0, #44	; 0x2c
 80015fe:	f7ff fe85 	bl	800130c <LCD_WriteReg>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <clearScreen>:

void clearScreen(uint16_t color){
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	80fb      	strh	r3, [r7, #6]
	LCD_SetXY(0,0);
 8001614:	2100      	movs	r1, #0
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fe90 	bl	800133c <LCD_SetXY>
	LCD_WR_REG(0x2c);
 800161c:	202c      	movs	r0, #44	; 0x2c
 800161e:	f7ff fe55 	bl	80012cc <LCD_WR_REG>
	for(int i=0;i<(240*320);i++){
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e006      	b.n	8001636 <clearScreen+0x2c>
		LCD_WR_DATA(color);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fe5e 	bl	80012ec <LCD_WR_DATA>
	for(int i=0;i<(240*320);i++){
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800163c:	dbf4      	blt.n	8001628 <clearScreen+0x1e>
	}
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <drawLine>:
	}else{
		return a;
	}
}

void drawLine(uint16_t startX, uint16_t startY, uint16_t endX, uint16_t endY, uint16_t color){
 8001646:	b5b0      	push	{r4, r5, r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4604      	mov	r4, r0
 800164e:	4608      	mov	r0, r1
 8001650:	4611      	mov	r1, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4623      	mov	r3, r4
 8001656:	80fb      	strh	r3, [r7, #6]
 8001658:	4603      	mov	r3, r0
 800165a:	80bb      	strh	r3, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	803b      	strh	r3, [r7, #0]
//	LCD_SetXY(startX, startY);

	uint16_t start_x=startX;
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	82fb      	strh	r3, [r7, #22]
	uint16_t start_y=startY;
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	82bb      	strh	r3, [r7, #20]
	uint16_t end_x=endX;
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	827b      	strh	r3, [r7, #18]
	uint16_t end_y=endY;
 8001670:	883b      	ldrh	r3, [r7, #0]
 8001672:	823b      	strh	r3, [r7, #16]

	if(((int16_t)endX-(int16_t)startX)<0){
 8001674:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001678:	461a      	mov	r2, r3
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	da03      	bge.n	800168c <drawLine+0x46>
		start_x=endX;
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	82fb      	strh	r3, [r7, #22]
		end_x=startX;
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	827b      	strh	r3, [r7, #18]
	}
	if(((int16_t)endY-(int16_t)startY)<0){
 800168c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001690:	461a      	mov	r2, r3
 8001692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	da03      	bge.n	80016a4 <drawLine+0x5e>
		start_y=endY;
 800169c:	883b      	ldrh	r3, [r7, #0]
 800169e:	82bb      	strh	r3, [r7, #20]
		end_y=startY;
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	823b      	strh	r3, [r7, #16]
	}

	uint16_t x_dis=end_x-start_x;
 80016a4:	8a7a      	ldrh	r2, [r7, #18]
 80016a6:	8afb      	ldrh	r3, [r7, #22]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	81fb      	strh	r3, [r7, #14]
	uint16_t y_dis=end_y-start_y;
 80016ac:	8a3a      	ldrh	r2, [r7, #16]
 80016ae:	8abb      	ldrh	r3, [r7, #20]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	81bb      	strh	r3, [r7, #12]
	float slope=(float)y_dis/(float)x_dis;
 80016b4:	89bb      	ldrh	r3, [r7, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fa5a 	bl	8000b70 <__aeabi_ui2f>
 80016bc:	4604      	mov	r4, r0
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fa55 	bl	8000b70 <__aeabi_ui2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fb5c 	bl	8000d88 <__aeabi_fdiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60bb      	str	r3, [r7, #8]
	drawPoint(start_x, start_y, color);
 80016d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016d6:	8ab9      	ldrh	r1, [r7, #20]
 80016d8:	8afb      	ldrh	r3, [r7, #22]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff7d 	bl	80015da <drawPoint>
	if(x_dis<y_dis){
 80016e0:	89fa      	ldrh	r2, [r7, #14]
 80016e2:	89bb      	ldrh	r3, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d24d      	bcs.n	8001784 <drawLine+0x13e>
		for(;y_dis;y_dis--){
 80016e8:	e023      	b.n	8001732 <drawLine+0xec>
			drawPoint(start_x+((float)y_dis/slope),start_y+y_dis, color);
 80016ea:	8afb      	ldrh	r3, [r7, #22]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fa43 	bl	8000b78 <__aeabi_i2f>
 80016f2:	4604      	mov	r4, r0
 80016f4:	89bb      	ldrh	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fa3a 	bl	8000b70 <__aeabi_ui2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb41 	bl	8000d88 <__aeabi_fdiv>
 8001706:	4603      	mov	r3, r0
 8001708:	4619      	mov	r1, r3
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff f980 	bl	8000a10 <__addsf3>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fbd4 	bl	8000ec0 <__aeabi_f2uiz>
 8001718:	4603      	mov	r3, r0
 800171a:	b298      	uxth	r0, r3
 800171c:	8aba      	ldrh	r2, [r7, #20]
 800171e:	89bb      	ldrh	r3, [r7, #12]
 8001720:	4413      	add	r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff ff57 	bl	80015da <drawPoint>
		for(;y_dis;y_dis--){
 800172c:	89bb      	ldrh	r3, [r7, #12]
 800172e:	3b01      	subs	r3, #1
 8001730:	81bb      	strh	r3, [r7, #12]
 8001732:	89bb      	ldrh	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1d8      	bne.n	80016ea <drawLine+0xa4>
	}else{
		for(;x_dis;x_dis--){
			drawPoint(start_x+x_dis, start_y+((float)x_dis*slope), color);
		}
	}
}
 8001738:	e027      	b.n	800178a <drawLine+0x144>
			drawPoint(start_x+x_dis, start_y+((float)x_dis*slope), color);
 800173a:	8afa      	ldrh	r2, [r7, #22]
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	4413      	add	r3, r2
 8001740:	b29c      	uxth	r4, r3
 8001742:	8abb      	ldrh	r3, [r7, #20]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fa17 	bl	8000b78 <__aeabi_i2f>
 800174a:	4605      	mov	r5, r0
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fa0e 	bl	8000b70 <__aeabi_ui2f>
 8001754:	4603      	mov	r3, r0
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa61 	bl	8000c20 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	4628      	mov	r0, r5
 8001764:	f7ff f954 	bl	8000a10 <__addsf3>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fba8 	bl	8000ec0 <__aeabi_f2uiz>
 8001770:	4603      	mov	r3, r0
 8001772:	b29b      	uxth	r3, r3
 8001774:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001776:	4619      	mov	r1, r3
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff ff2e 	bl	80015da <drawPoint>
		for(;x_dis;x_dis--){
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	3b01      	subs	r3, #1
 8001782:	81fb      	strh	r3, [r7, #14]
 8001784:	89fb      	ldrh	r3, [r7, #14]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1d7      	bne.n	800173a <drawLine+0xf4>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}

08001792 <drawRect>:

void drawRect(uint16_t startX, uint16_t startY, uint16_t endX, uint16_t endY, uint16_t color){
 8001792:	b590      	push	{r4, r7, lr}
 8001794:	b085      	sub	sp, #20
 8001796:	af02      	add	r7, sp, #8
 8001798:	4604      	mov	r4, r0
 800179a:	4608      	mov	r0, r1
 800179c:	4611      	mov	r1, r2
 800179e:	461a      	mov	r2, r3
 80017a0:	4623      	mov	r3, r4
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4603      	mov	r3, r0
 80017a6:	80bb      	strh	r3, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	803b      	strh	r3, [r7, #0]
	drawLine(startX, startY, endX, startY, color);//上边
 80017b0:	88bc      	ldrh	r4, [r7, #4]
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	88b9      	ldrh	r1, [r7, #4]
 80017b6:	88f8      	ldrh	r0, [r7, #6]
 80017b8:	8b3b      	ldrh	r3, [r7, #24]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4623      	mov	r3, r4
 80017be:	f7ff ff42 	bl	8001646 <drawLine>
	drawLine(startX, endY, endX, endY, color);//下边
 80017c2:	883c      	ldrh	r4, [r7, #0]
 80017c4:	887a      	ldrh	r2, [r7, #2]
 80017c6:	8839      	ldrh	r1, [r7, #0]
 80017c8:	88f8      	ldrh	r0, [r7, #6]
 80017ca:	8b3b      	ldrh	r3, [r7, #24]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4623      	mov	r3, r4
 80017d0:	f7ff ff39 	bl	8001646 <drawLine>
	drawLine(startX, startY, startX, endY, color);//左边
 80017d4:	883c      	ldrh	r4, [r7, #0]
 80017d6:	88fa      	ldrh	r2, [r7, #6]
 80017d8:	88b9      	ldrh	r1, [r7, #4]
 80017da:	88f8      	ldrh	r0, [r7, #6]
 80017dc:	8b3b      	ldrh	r3, [r7, #24]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4623      	mov	r3, r4
 80017e2:	f7ff ff30 	bl	8001646 <drawLine>
	drawLine(endX, startY, endX, endY, color);//右边
 80017e6:	883c      	ldrh	r4, [r7, #0]
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	88b9      	ldrh	r1, [r7, #4]
 80017ec:	8878      	ldrh	r0, [r7, #2]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4623      	mov	r3, r4
 80017f4:	f7ff ff27 	bl	8001646 <drawLine>
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <drawSquare>:

void drawSquare(uint16_t startX, uint16_t startY, uint16_t endX, uint16_t endY, uint16_t color){
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	80fb      	strh	r3, [r7, #6]
 8001812:	4603      	mov	r3, r0
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
 800181a:	4613      	mov	r3, r2
 800181c:	803b      	strh	r3, [r7, #0]
	for(uint16_t i=startY;i<=endY;i++){
 800181e:	88bb      	ldrh	r3, [r7, #4]
 8001820:	81fb      	strh	r3, [r7, #14]
 8001822:	e019      	b.n	8001858 <drawSquare+0x58>
		LCD_SetXY(startX, i);
 8001824:	89fa      	ldrh	r2, [r7, #14]
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fd86 	bl	800133c <LCD_SetXY>
		LCD_WR_REG(0x2c);
 8001830:	202c      	movs	r0, #44	; 0x2c
 8001832:	f7ff fd4b 	bl	80012cc <LCD_WR_REG>
		for(uint16_t j=startX;j<=endX;j++){
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	81bb      	strh	r3, [r7, #12]
 800183a:	e006      	b.n	800184a <drawSquare+0x4a>
			LCD_WR_DATA(color);
 800183c:	8c3b      	ldrh	r3, [r7, #32]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fd54 	bl	80012ec <LCD_WR_DATA>
		for(uint16_t j=startX;j<=endX;j++){
 8001844:	89bb      	ldrh	r3, [r7, #12]
 8001846:	3301      	adds	r3, #1
 8001848:	81bb      	strh	r3, [r7, #12]
 800184a:	89ba      	ldrh	r2, [r7, #12]
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	429a      	cmp	r2, r3
 8001850:	d9f4      	bls.n	800183c <drawSquare+0x3c>
	for(uint16_t i=startY;i<=endY;i++){
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	81fb      	strh	r3, [r7, #14]
 8001858:	89fa      	ldrh	r2, [r7, #14]
 800185a:	883b      	ldrh	r3, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d9e1      	bls.n	8001824 <drawSquare+0x24>
		}
	}
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}

08001868 <drawRectWithBorder>:

void drawRectWithBorder(uint16_t startX, uint16_t startY, uint16_t endX, uint16_t endY, uint16_t color, uint8_t border){
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b087      	sub	sp, #28
 800186c:	af02      	add	r7, sp, #8
 800186e:	4604      	mov	r4, r0
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	80fb      	strh	r3, [r7, #6]
 800187a:	4603      	mov	r3, r0
 800187c:	80bb      	strh	r3, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	803b      	strh	r3, [r7, #0]
	uint16_t start_x=startX;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y=startY;
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	81bb      	strh	r3, [r7, #12]
	uint16_t end_x=endX;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	817b      	strh	r3, [r7, #10]
	uint16_t end_y=endY;
 8001892:	883b      	ldrh	r3, [r7, #0]
 8001894:	813b      	strh	r3, [r7, #8]

	if(((int16_t)endX-(int16_t)startX)<0){
 8001896:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800189a:	461a      	mov	r2, r3
 800189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da03      	bge.n	80018ae <drawRectWithBorder+0x46>
		start_x=endX;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	81fb      	strh	r3, [r7, #14]
		end_x=startX;
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	817b      	strh	r3, [r7, #10]
	}
	if(((int16_t)endY-(int16_t)startY)<0){
 80018ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da2f      	bge.n	800191e <drawRectWithBorder+0xb6>
		start_y=endY;
 80018be:	883b      	ldrh	r3, [r7, #0]
 80018c0:	81bb      	strh	r3, [r7, #12]
		end_y=startY;
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	813b      	strh	r3, [r7, #8]
	}

	for(;border;border--){
 80018c6:	e02a      	b.n	800191e <drawRectWithBorder+0xb6>
		drawRect(start_x+border-1, start_y+border-1, end_x-border+1, end_y-border+1, color);
 80018c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	4413      	add	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b298      	uxth	r0, r3
 80018d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018dc:	b29a      	uxth	r2, r3
 80018de:	89bb      	ldrh	r3, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b299      	uxth	r1, r3
 80018e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	897a      	ldrh	r2, [r7, #10]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	b29c      	uxth	r4, r3
 80018f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	893a      	ldrh	r2, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	b29b      	uxth	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	8c3b      	ldrh	r3, [r7, #32]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	4622      	mov	r2, r4
 8001910:	f7ff ff3f 	bl	8001792 <drawRect>
	for(;border;border--){
 8001914:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001918:	3b01      	subs	r3, #1
 800191a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800191e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1d0      	bne.n	80018c8 <drawRectWithBorder+0x60>
	}
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}

0800192e <draw16x8>:

void draw16x8(uint16_t x, uint16_t y, uint8_t*buf, uint16_t font_color, uint16_t back_color){
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	461a      	mov	r2, r3
 8001938:	4603      	mov	r3, r0
 800193a:	81fb      	strh	r3, [r7, #14]
 800193c:	460b      	mov	r3, r1
 800193e:	81bb      	strh	r3, [r7, #12]
 8001940:	4613      	mov	r3, r2
 8001942:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0;i<16;i++){
 8001944:	2300      	movs	r3, #0
 8001946:	75fb      	strb	r3, [r7, #23]
 8001948:	e036      	b.n	80019b8 <draw16x8+0x8a>
		for(uint8_t j=0;j<8;j++){
 800194a:	2300      	movs	r3, #0
 800194c:	75bb      	strb	r3, [r7, #22]
 800194e:	e02d      	b.n	80019ac <draw16x8+0x7e>
			uint8_t mask=(0x01<<j);//找到的字库有猫病，和正常的是反的(左右呈镜像），正常应该是0x80>>j
 8001950:	7dbb      	ldrb	r3, [r7, #22]
 8001952:	2201      	movs	r2, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	757b      	strb	r3, [r7, #21]
			if(buf[i]&mask){
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	4413      	add	r3, r2
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	7d7b      	ldrb	r3, [r7, #21]
 8001964:	4013      	ands	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00e      	beq.n	800198a <draw16x8+0x5c>
				drawPoint(x+j, y+i, font_color);
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	b29a      	uxth	r2, r3
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	4413      	add	r3, r2
 8001974:	b298      	uxth	r0, r3
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	b29a      	uxth	r2, r3
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	4413      	add	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff fe29 	bl	80015da <drawPoint>
 8001988:	e00d      	b.n	80019a6 <draw16x8+0x78>
			}else{
				drawPoint(x+j, y+i, back_color);
 800198a:	7dbb      	ldrb	r3, [r7, #22]
 800198c:	b29a      	uxth	r2, r3
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	4413      	add	r3, r2
 8001992:	b298      	uxth	r0, r3
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	b29a      	uxth	r2, r3
 8001998:	89bb      	ldrh	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	8c3a      	ldrh	r2, [r7, #32]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff fe1a 	bl	80015da <drawPoint>
		for(uint8_t j=0;j<8;j++){
 80019a6:	7dbb      	ldrb	r3, [r7, #22]
 80019a8:	3301      	adds	r3, #1
 80019aa:	75bb      	strb	r3, [r7, #22]
 80019ac:	7dbb      	ldrb	r3, [r7, #22]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d9ce      	bls.n	8001950 <draw16x8+0x22>
	for(uint8_t i=0;i<16;i++){
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	3301      	adds	r3, #1
 80019b6:	75fb      	strb	r3, [r7, #23]
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	d9c5      	bls.n	800194a <draw16x8+0x1c>
			}
		}
	}
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <draw16x16>:

void draw16x16(uint16_t x, uint16_t y, uint16_t*buf, uint16_t font_color, uint16_t back_color){
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	81fb      	strh	r3, [r7, #14]
 80019d4:	460b      	mov	r3, r1
 80019d6:	81bb      	strh	r3, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0;i<16;i++){
 80019dc:	2300      	movs	r3, #0
 80019de:	75fb      	strb	r3, [r7, #23]
 80019e0:	e038      	b.n	8001a54 <draw16x16+0x8e>
		for(uint8_t j=0;j<16;j++){
 80019e2:	2300      	movs	r3, #0
 80019e4:	75bb      	strb	r3, [r7, #22]
 80019e6:	e02f      	b.n	8001a48 <draw16x16+0x82>
			uint16_t mask=(0x8000>>j);
 80019e8:	7dbb      	ldrb	r3, [r7, #22]
 80019ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019ee:	fa42 f303 	asr.w	r3, r2, r3
 80019f2:	82bb      	strh	r3, [r7, #20]
			if(buf[i]&mask){
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	4413      	add	r3, r2
 80019fc:	881a      	ldrh	r2, [r3, #0]
 80019fe:	8abb      	ldrh	r3, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <draw16x16+0x60>
				drawPoint(x+j, y+i, font_color);
 8001a08:	7dbb      	ldrb	r3, [r7, #22]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b298      	uxth	r0, r3
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	89bb      	ldrh	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	88fa      	ldrh	r2, [r7, #6]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff fddb 	bl	80015da <drawPoint>
 8001a24:	e00d      	b.n	8001a42 <draw16x16+0x7c>
			}else{
				drawPoint(x+j, y+i, back_color);
 8001a26:	7dbb      	ldrb	r3, [r7, #22]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b298      	uxth	r0, r3
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	89bb      	ldrh	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	8c3a      	ldrh	r2, [r7, #32]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff fdcc 	bl	80015da <drawPoint>
		for(uint8_t j=0;j<16;j++){
 8001a42:	7dbb      	ldrb	r3, [r7, #22]
 8001a44:	3301      	adds	r3, #1
 8001a46:	75bb      	strb	r3, [r7, #22]
 8001a48:	7dbb      	ldrb	r3, [r7, #22]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	d9cc      	bls.n	80019e8 <draw16x16+0x22>
	for(uint8_t i=0;i<16;i++){
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	3301      	adds	r3, #1
 8001a52:	75fb      	strb	r3, [r7, #23]
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	d9c3      	bls.n	80019e2 <draw16x16+0x1c>
			}
		}
	}
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <printChar>:

//charTable 的第一个uint8_t 来表示编码， 后面的16个uint8_t来表示字模
void printChar(uint16_t x, uint16_t y,uint8_t charTable[][17], uint8_t whichChar, uint16_t font_color, uint16_t back_color){
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af02      	add	r7, sp, #8
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	81fb      	strh	r3, [r7, #14]
 8001a70:	460b      	mov	r3, r1
 8001a72:	81bb      	strh	r3, [r7, #12]
 8001a74:	4613      	mov	r3, r2
 8001a76:	71fb      	strb	r3, [r7, #7]
	for(; charTable[0][0]; charTable++){
 8001a78:	e012      	b.n	8001aa0 <printChar+0x3e>
		if(charTable[0][0]==whichChar){
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d10a      	bne.n	8001a9a <printChar+0x38>
			draw16x8(x, y, ((uint8_t*)charTable)+1 , font_color, back_color);
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	8c3c      	ldrh	r4, [r7, #32]
 8001a8a:	89b9      	ldrh	r1, [r7, #12]
 8001a8c:	89f8      	ldrh	r0, [r7, #14]
 8001a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	4623      	mov	r3, r4
 8001a94:	f7ff ff4b 	bl	800192e <draw16x8>
			break;
 8001a98:	e006      	b.n	8001aa8 <printChar+0x46>
	for(; charTable[0][0]; charTable++){
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3311      	adds	r3, #17
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e8      	bne.n	8001a7a <printChar+0x18>
		}
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <printWord>:

//wordTable 的前1个uint32_t来表示编码， 后面16个uint16_t来表示字模, 使用的是UTF-8编码， 一个汉字一般占24bit， UTF-8是变长编码
void printWord(uint16_t x, uint16_t y, Word_Module *wordTable, uint32_t whichWord, uint16_t font_color, uint16_t back_color){
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60ba      	str	r2, [r7, #8]
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4603      	mov	r3, r0
 8001abc:	81fb      	strh	r3, [r7, #14]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	81bb      	strh	r3, [r7, #12]
	for(; wordTable->Word; wordTable++){
 8001ac2:	e014      	b.n	8001aee <printWord+0x3e>
		if(*(wordTable->Word)==*((uint32_t*)whichWord)){
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d10a      	bne.n	8001ae8 <printWord+0x38>
			draw16x16(x, y, wordTable->Module, font_color, back_color);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1d1a      	adds	r2, r3, #4
 8001ad6:	8c3c      	ldrh	r4, [r7, #32]
 8001ad8:	89b9      	ldrh	r1, [r7, #12]
 8001ada:	89f8      	ldrh	r0, [r7, #14]
 8001adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	f7ff ff70 	bl	80019c6 <draw16x16>
			break;
 8001ae6:	e006      	b.n	8001af6 <printWord+0x46>
	for(; wordTable->Word; wordTable++){
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3324      	adds	r3, #36	; 0x24
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e6      	bne.n	8001ac4 <printWord+0x14>
		}
	}
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}

08001afe <printString>:
	}
	res = f_close(&fil);
	return res;
}

void printString(uint16_t x, uint16_t y, uint8_t charTable[][17], Word_Module *wordTable, uint8_t* str, uint16_t font_color, uint16_t back_color){
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b088      	sub	sp, #32
 8001b02:	af02      	add	r7, sp, #8
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	81fb      	strh	r3, [r7, #14]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	81bb      	strh	r3, [r7, #12]
	uint8_t tmpx=0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]
	uint8_t tmpy=0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	75bb      	strb	r3, [r7, #22]
	for(uint16_t cur=0; str[cur]; ){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	82bb      	strh	r3, [r7, #20]
 8001b1c:	e06f      	b.n	8001bfe <printString+0x100>
		if(str[cur]&0x80){
 8001b1e:	8abb      	ldrh	r3, [r7, #20]
 8001b20:	6a3a      	ldr	r2, [r7, #32]
 8001b22:	4413      	add	r3, r2
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da33      	bge.n	8001b94 <printString+0x96>
			//如果是汉字
			uint32_t whichWord=0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
			whichWord |= str[cur];
 8001b30:	8abb      	ldrh	r3, [r7, #20]
 8001b32:	6a3a      	ldr	r2, [r7, #32]
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
			whichWord |= str[cur+1]<<8;
 8001b40:	8abb      	ldrh	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	6a3a      	ldr	r2, [r7, #32]
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
			whichWord |= str[cur+2]<<16;
 8001b54:	8abb      	ldrh	r3, [r7, #20]
 8001b56:	3302      	adds	r3, #2
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	041b      	lsls	r3, r3, #16
 8001b60:	461a      	mov	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
			printWord(x+8*cur, y, wordTable, whichWord, font_color, back_color);
 8001b68:	8abb      	ldrh	r3, [r7, #20]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	4413      	add	r3, r2
 8001b72:	b298      	uxth	r0, r3
 8001b74:	89b9      	ldrh	r1, [r7, #12]
 8001b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	f7ff ff95 	bl	8001ab0 <printWord>
			cur+=3;
 8001b86:	8abb      	ldrh	r3, [r7, #20]
 8001b88:	3303      	adds	r3, #3
 8001b8a:	82bb      	strh	r3, [r7, #20]
			tmpx+=2;
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	75fb      	strb	r3, [r7, #23]
 8001b92:	e034      	b.n	8001bfe <printString+0x100>
		}else if(str[cur]!='\n'){
 8001b94:	8abb      	ldrh	r3, [r7, #20]
 8001b96:	6a3a      	ldr	r2, [r7, #32]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b0a      	cmp	r3, #10
 8001b9e:	d020      	beq.n	8001be2 <printString+0xe4>
			//如果是char
			printChar(x+8*tmpx, y+16*tmpy, charTable, str[cur], font_color, back_color);
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	4413      	add	r3, r2
 8001bac:	b298      	uxth	r0, r3
 8001bae:	7dbb      	ldrb	r3, [r7, #22]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	89bb      	ldrh	r3, [r7, #12]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	8abb      	ldrh	r3, [r7, #20]
 8001bbe:	6a3a      	ldr	r2, [r7, #32]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f7ff ff47 	bl	8001a62 <printChar>
			cur+=1;
 8001bd4:	8abb      	ldrh	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	82bb      	strh	r3, [r7, #20]
			tmpx+=1;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	75fb      	strb	r3, [r7, #23]
 8001be0:	e00d      	b.n	8001bfe <printString+0x100>
		}else if(str[cur]=='\n'){
 8001be2:	8abb      	ldrh	r3, [r7, #20]
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b0a      	cmp	r3, #10
 8001bec:	d107      	bne.n	8001bfe <printString+0x100>
			cur+=1;
 8001bee:	8abb      	ldrh	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	82bb      	strh	r3, [r7, #20]
			tmpy+=1;
 8001bf4:	7dbb      	ldrb	r3, [r7, #22]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	75bb      	strb	r3, [r7, #22]
			tmpx=0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
	for(uint16_t cur=0; str[cur]; ){
 8001bfe:	8abb      	ldrh	r3, [r7, #20]
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d189      	bne.n	8001b1e <printString+0x20>
		}
	}
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <drawButton>:
	return;
}



void drawButton(uint8_t *name, uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, uint16_t font_color, uint16_t back_color, uint16_t border_color){
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b08b      	sub	sp, #44	; 0x2c
 8001c18:	af04      	add	r7, sp, #16
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	4611      	mov	r1, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	4603      	mov	r3, r0
 8001c24:	817b      	strh	r3, [r7, #10]
 8001c26:	460b      	mov	r3, r1
 8001c28:	813b      	strh	r3, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
	drawRectWithBorder(start_x, start_y, end_x, end_y, border_color, 4);
 8001c2e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	8939      	ldrh	r1, [r7, #8]
 8001c34:	8978      	ldrh	r0, [r7, #10]
 8001c36:	2304      	movs	r3, #4
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4623      	mov	r3, r4
 8001c40:	f7ff fe12 	bl	8001868 <drawRectWithBorder>
	drawSquare(start_x+4, start_y+4, end_x-4, end_y-4, back_color);
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	3304      	adds	r3, #4
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	893b      	ldrh	r3, [r7, #8]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	b299      	uxth	r1, r3
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	3b04      	subs	r3, #4
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c58:	3b04      	subs	r3, #4
 8001c5a:	b29c      	uxth	r4, r3
 8001c5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7ff fdcd 	bl	8001800 <drawSquare>
	uint8_t i=0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
	for(i=0;name[i];i++);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	75fb      	strb	r3, [r7, #23]
 8001c6e:	e002      	b.n	8001c76 <drawButton+0x62>
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	3301      	adds	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f6      	bne.n	8001c70 <drawButton+0x5c>
	printString(start_x+4+(end_x-start_x-8)/2-i*4, start_y+4+(end_y-start_y-8)/2-8, CharTable, WordTable, name, font_color, back_color);
 8001c82:	88fa      	ldrh	r2, [r7, #6]
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	3b08      	subs	r3, #8
 8001c8a:	0fda      	lsrs	r2, r3, #31
 8001c8c:	4413      	add	r3, r2
 8001c8e:	105b      	asrs	r3, r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	4413      	add	r3, r2
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	b298      	uxth	r0, r3
 8001ca8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001caa:	893b      	ldrh	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	3b08      	subs	r3, #8
 8001cb0:	0fda      	lsrs	r2, r3, #31
 8001cb2:	4413      	add	r3, r2
 8001cb4:	105b      	asrs	r3, r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	893b      	ldrh	r3, [r7, #8]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <drawButton+0xcc>)
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <drawButton+0xd0>)
 8001cd2:	f7ff ff14 	bl	8001afe <printString>
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	08003af8 	.word	0x08003af8
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <ButtonCreate>:

BUTTON_S buttons[20]={0};
uint8_t buttons_counter=0;
void ButtonCreate(uint8_t *name, uint8_t id, uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, void(*handle)(uint8_t), uint16_t font_color, uint16_t back_color, uint16_t border_color){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	72fb      	strb	r3, [r7, #11]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
	buttons[id].start_x=start_x;
 8001d02:	7afa      	ldrb	r2, [r7, #11]
 8001d04:	494d      	ldr	r1, [pc, #308]	; (8001e3c <ButtonCreate+0x154>)
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	893a      	ldrh	r2, [r7, #8]
 8001d12:	801a      	strh	r2, [r3, #0]
	buttons[id].end_x=end_x;
 8001d14:	7afa      	ldrb	r2, [r7, #11]
 8001d16:	4949      	ldr	r1, [pc, #292]	; (8001e3c <ButtonCreate+0x154>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	3304      	adds	r3, #4
 8001d24:	8c3a      	ldrh	r2, [r7, #32]
 8001d26:	801a      	strh	r2, [r3, #0]
	buttons[id].start_y=start_y;
 8001d28:	7afa      	ldrb	r2, [r7, #11]
 8001d2a:	4944      	ldr	r1, [pc, #272]	; (8001e3c <ButtonCreate+0x154>)
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	3302      	adds	r3, #2
 8001d38:	88fa      	ldrh	r2, [r7, #6]
 8001d3a:	801a      	strh	r2, [r3, #0]
	buttons[id].end_y=end_y;
 8001d3c:	7afa      	ldrb	r2, [r7, #11]
 8001d3e:	493f      	ldr	r1, [pc, #252]	; (8001e3c <ButtonCreate+0x154>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	3306      	adds	r3, #6
 8001d4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d4e:	801a      	strh	r2, [r3, #0]
	buttons[id].font_color=font_color;
 8001d50:	7afa      	ldrb	r2, [r7, #11]
 8001d52:	493a      	ldr	r1, [pc, #232]	; (8001e3c <ButtonCreate+0x154>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3308      	adds	r3, #8
 8001d60:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d62:	801a      	strh	r2, [r3, #0]
	buttons[id].back_color=back_color;
 8001d64:	7afa      	ldrb	r2, [r7, #11]
 8001d66:	4935      	ldr	r1, [pc, #212]	; (8001e3c <ButtonCreate+0x154>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	330a      	adds	r3, #10
 8001d74:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001d76:	801a      	strh	r2, [r3, #0]
	buttons[id].border_color=border_color;
 8001d78:	7afa      	ldrb	r2, [r7, #11]
 8001d7a:	4930      	ldr	r1, [pc, #192]	; (8001e3c <ButtonCreate+0x154>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	330c      	adds	r3, #12
 8001d88:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d8a:	801a      	strh	r2, [r3, #0]
	buttons[id].id=id;
 8001d8c:	7afa      	ldrb	r2, [r7, #11]
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	b298      	uxth	r0, r3
 8001d92:	492a      	ldr	r1, [pc, #168]	; (8001e3c <ButtonCreate+0x154>)
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	330e      	adds	r3, #14
 8001da0:	4602      	mov	r2, r0
 8001da2:	801a      	strh	r2, [r3, #0]
	buttons[id].handler=handle;
 8001da4:	7afa      	ldrb	r2, [r7, #11]
 8001da6:	4925      	ldr	r1, [pc, #148]	; (8001e3c <ButtonCreate+0x154>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3324      	adds	r3, #36	; 0x24
 8001db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001db6:	601a      	str	r2, [r3, #0]
	for(int i=0;name[i]&&(i<12);i++){
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e012      	b.n	8001de4 <ButtonCreate+0xfc>
		buttons[id].name[i]=name[i];
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	7afa      	ldrb	r2, [r7, #11]
 8001dc6:	7818      	ldrb	r0, [r3, #0]
 8001dc8:	491c      	ldr	r1, [pc, #112]	; (8001e3c <ButtonCreate+0x154>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	18ca      	adds	r2, r1, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3316      	adds	r3, #22
 8001dda:	4602      	mov	r2, r0
 8001ddc:	701a      	strb	r2, [r3, #0]
	for(int i=0;name[i]&&(i<12);i++){
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <ButtonCreate+0x10e>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b0b      	cmp	r3, #11
 8001df4:	dde3      	ble.n	8001dbe <ButtonCreate+0xd6>
	}
	buttons[id].name[11]=0;
 8001df6:	7afa      	ldrb	r2, [r7, #11]
 8001df8:	4910      	ldr	r1, [pc, #64]	; (8001e3c <ButtonCreate+0x154>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3321      	adds	r3, #33	; 0x21
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
	drawButton(name, start_x, start_y, end_x, end_y, font_color, back_color, border_color);
 8001e0a:	8c38      	ldrh	r0, [r7, #32]
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	8939      	ldrh	r1, [r7, #8]
 8001e10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e12:	9303      	str	r3, [sp, #12]
 8001e14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4603      	mov	r3, r0
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fef6 	bl	8001c14 <drawButton>

	buttons_counter++;
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <ButtonCreate+0x158>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <ButtonCreate+0x158>)
 8001e32:	701a      	strb	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	2000069c 	.word	0x2000069c
 8001e40:	200009bc 	.word	0x200009bc

08001e44 <ScreenScan>:


uint16_t gui_touch_x, gui_touch_y;

void ScreenScan(){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
	uint8_t status;
	status=get_Pen_XY(&gui_touch_x, &gui_touch_y);
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <ScreenScan+0x30>)
 8001e4c:	480a      	ldr	r0, [pc, #40]	; (8001e78 <ScreenScan+0x34>)
 8001e4e:	f001 fc87 	bl	8003760 <get_Pen_XY>
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	if(status){
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <ScreenScan+0x20>
		ButtonsScan(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f000 f80d 	bl	8001e7c <ButtonsScan>
	}else{
		ButtonsScan(0);
	}
}
 8001e62:	e002      	b.n	8001e6a <ScreenScan+0x26>
		ButtonsScan(0);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 f809 	bl	8001e7c <ButtonsScan>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000dd6 	.word	0x20000dd6
 8001e78:	20000dd4 	.word	0x20000dd4

08001e7c <ButtonsScan>:

void ButtonsScan(uint8_t isPressed){
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	if(isPressed){
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80c1 	beq.w	8002010 <ButtonsScan+0x194>
		for(int i=0;i<buttons_counter;i++){
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e0b5      	b.n	8002000 <ButtonsScan+0x184>
			if(((gui_touch_x>buttons[i].start_x)&&(gui_touch_x<buttons[i].end_x))&&((gui_touch_y>buttons[i].start_y)&&(gui_touch_y<buttons[i].end_y))){
 8001e94:	496c      	ldr	r1, [pc, #432]	; (8002048 <ButtonsScan+0x1cc>)
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	4b69      	ldr	r3, [pc, #420]	; (800204c <ButtonsScan+0x1d0>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d271      	bcs.n	8001f90 <ButtonsScan+0x114>
 8001eac:	4966      	ldr	r1, [pc, #408]	; (8002048 <ButtonsScan+0x1cc>)
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	3304      	adds	r3, #4
 8001ebc:	881a      	ldrh	r2, [r3, #0]
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <ButtonsScan+0x1d0>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d964      	bls.n	8001f90 <ButtonsScan+0x114>
 8001ec6:	4960      	ldr	r1, [pc, #384]	; (8002048 <ButtonsScan+0x1cc>)
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <ButtonsScan+0x1d4>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d257      	bcs.n	8001f90 <ButtonsScan+0x114>
 8001ee0:	4959      	ldr	r1, [pc, #356]	; (8002048 <ButtonsScan+0x1cc>)
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	3306      	adds	r3, #6
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	4b57      	ldr	r3, [pc, #348]	; (8002050 <ButtonsScan+0x1d4>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d94a      	bls.n	8001f90 <ButtonsScan+0x114>
				if(buttons[i].isPressed<10){
 8001efa:	4953      	ldr	r1, [pc, #332]	; (8002048 <ButtonsScan+0x1cc>)
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	3310      	adds	r3, #16
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	d814      	bhi.n	8001f3a <ButtonsScan+0xbe>
					buttons[i].isPressed++;
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <ButtonsScan+0x1cc>)
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3310      	adds	r3, #16
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b298      	uxth	r0, r3
 8001f26:	4948      	ldr	r1, [pc, #288]	; (8002048 <ButtonsScan+0x1cc>)
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	3310      	adds	r3, #16
 8001f36:	4602      	mov	r2, r0
 8001f38:	801a      	strh	r2, [r3, #0]
				}
				if(buttons[i].isPressed>5){
 8001f3a:	4943      	ldr	r1, [pc, #268]	; (8002048 <ButtonsScan+0x1cc>)
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3310      	adds	r3, #16
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d909      	bls.n	8001f64 <ButtonsScan+0xe8>
					buttons[i].isRelated=0;
 8001f50:	493d      	ldr	r1, [pc, #244]	; (8002048 <ButtonsScan+0x1cc>)
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3312      	adds	r3, #18
 8001f60:	2200      	movs	r2, #0
 8001f62:	801a      	strh	r2, [r3, #0]
				}
				if(buttons[i].isPressed==6){
 8001f64:	4938      	ldr	r1, [pc, #224]	; (8002048 <ButtonsScan+0x1cc>)
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3310      	adds	r3, #16
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d13f      	bne.n	8001ffa <ButtonsScan+0x17e>
					buttons[i].onePressedFlag=1;
 8001f7a:	4933      	ldr	r1, [pc, #204]	; (8002048 <ButtonsScan+0x1cc>)
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	3314      	adds	r3, #20
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	801a      	strh	r2, [r3, #0]
				if(buttons[i].isPressed==6){
 8001f8e:	e034      	b.n	8001ffa <ButtonsScan+0x17e>
				}
			}else{
				if(buttons[i].isRelated<10){
 8001f90:	492d      	ldr	r1, [pc, #180]	; (8002048 <ButtonsScan+0x1cc>)
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3312      	adds	r3, #18
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	2b09      	cmp	r3, #9
 8001fa4:	d814      	bhi.n	8001fd0 <ButtonsScan+0x154>
					buttons[i].isRelated++;
 8001fa6:	4928      	ldr	r1, [pc, #160]	; (8002048 <ButtonsScan+0x1cc>)
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3312      	adds	r3, #18
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b298      	uxth	r0, r3
 8001fbc:	4922      	ldr	r1, [pc, #136]	; (8002048 <ButtonsScan+0x1cc>)
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	3312      	adds	r3, #18
 8001fcc:	4602      	mov	r2, r0
 8001fce:	801a      	strh	r2, [r3, #0]
				}
				if(buttons[i].isRelated>5){
 8001fd0:	491d      	ldr	r1, [pc, #116]	; (8002048 <ButtonsScan+0x1cc>)
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3312      	adds	r3, #18
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d909      	bls.n	8001ffa <ButtonsScan+0x17e>
					buttons[i].isPressed=0;
 8001fe6:	4918      	ldr	r1, [pc, #96]	; (8002048 <ButtonsScan+0x1cc>)
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3310      	adds	r3, #16
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<buttons_counter;i++){
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <ButtonsScan+0x1d8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4293      	cmp	r3, r2
 800200a:	f6ff af43 	blt.w	8001e94 <ButtonsScan+0x18>
	}else{
		for(int i=0;i<buttons_counter;i++){
			buttons[i].isPressed=0;
		}
	}
}
 800200e:	e015      	b.n	800203c <ButtonsScan+0x1c0>
		for(int i=0;i<buttons_counter;i++){
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	e00c      	b.n	8002030 <ButtonsScan+0x1b4>
			buttons[i].isPressed=0;
 8002016:	490c      	ldr	r1, [pc, #48]	; (8002048 <ButtonsScan+0x1cc>)
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3310      	adds	r3, #16
 8002026:	2200      	movs	r2, #0
 8002028:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<buttons_counter;i++){
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <ButtonsScan+0x1d8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4293      	cmp	r3, r2
 800203a:	dbec      	blt.n	8002016 <ButtonsScan+0x19a>
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000069c 	.word	0x2000069c
 800204c:	20000dd4 	.word	0x20000dd4
 8002050:	20000dd6 	.word	0x20000dd6
 8002054:	200009bc 	.word	0x200009bc

08002058 <Button_dothings>:

void Button_dothings(){
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
	for(int i=0;i<buttons_counter;i++){
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	e02c      	b.n	80020be <Button_dothings+0x66>
		if(buttons[i].onePressedFlag){
 8002064:	491b      	ldr	r1, [pc, #108]	; (80020d4 <Button_dothings+0x7c>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3314      	adds	r3, #20
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01e      	beq.n	80020b8 <Button_dothings+0x60>
			buttons[i].onePressedFlag=0;
 800207a:	4916      	ldr	r1, [pc, #88]	; (80020d4 <Button_dothings+0x7c>)
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	3314      	adds	r3, #20
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
			buttons[i].handler(buttons[i].id);
 800208e:	4911      	ldr	r1, [pc, #68]	; (80020d4 <Button_dothings+0x7c>)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3324      	adds	r3, #36	; 0x24
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <Button_dothings+0x7c>)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4403      	add	r3, r0
 80020ae:	330e      	adds	r3, #14
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	4788      	blx	r1
	for(int i=0;i<buttons_counter;i++){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <Button_dothings+0x80>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	dbcc      	blt.n	8002064 <Button_dothings+0xc>
		}
	}
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000069c 	.word	0x2000069c
 80020d8:	200009bc 	.word	0x200009bc

080020dc <mymemset>:
//设置内存
//*s:内存首地址
//c :要设置的值
//count:需要设置的内存大小(字节为单位)
void mymemset(void *s,uint8_t c,uint32_t count)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	460b      	mov	r3, r1
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	72fb      	strb	r3, [r7, #11]
    uint8_t *xs = s;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	617b      	str	r3, [r7, #20]
    while(count--)*xs++=c;
 80020ee:	e004      	b.n	80020fa <mymemset+0x1e>
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	617a      	str	r2, [r7, #20]
 80020f6:	7afa      	ldrb	r2, [r7, #11]
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f5      	bne.n	80020f0 <mymemset+0x14>
}
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
	...

08002110 <my_mem_init>:
//内存管理初始化
//memx:所属内存块
void my_mem_init(uint8_t memx)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
    mymemset(mallco_dev.memmap[memx], 0,memtblsize[memx]*2);//内存状态表数据清零
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <my_mem_init+0x54>)
 800211e:	3304      	adds	r3, #4
 8002120:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <my_mem_init+0x58>)
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	461a      	mov	r2, r3
 8002130:	2100      	movs	r1, #0
 8002132:	f7ff ffd3 	bl	80020dc <mymemset>
	mymemset(mallco_dev.membase[memx], 0,memsize[memx]);	//内存池所有数据清零
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <my_mem_init+0x54>)
 800213a:	3302      	adds	r3, #2
 800213c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <my_mem_init+0x5c>)
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	461a      	mov	r2, r3
 800214a:	2100      	movs	r1, #0
 800214c:	f7ff ffc6 	bl	80020dc <mymemset>
	mallco_dev.memrdy[memx]=1;								//内存管理初始化OK
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <my_mem_init+0x54>)
 8002154:	4413      	add	r3, r2
 8002156:	2201      	movs	r2, #1
 8002158:	761a      	strb	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000660 	.word	0x20000660
 8002168:	08003b40 	.word	0x08003b40
 800216c:	08003b48 	.word	0x08003b48

08002170 <my_mem_perused>:
//获取内存使用率
//memx:所属内存块
//返回值:使用率(0~100)
uint8_t my_mem_perused(uint8_t memx)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
    uint32_t used=0;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
    uint32_t i;
    for(i=0;i<memtblsize[memx];i++)
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	e010      	b.n	80021a6 <my_mem_perused+0x36>
    {
        if(mallco_dev.memmap[memx][i])used++;
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <my_mem_perused+0x64>)
 8002188:	3304      	adds	r3, #4
 800218a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <my_mem_perused+0x30>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
    for(i=0;i<memtblsize[memx];i++)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <my_mem_perused+0x68>)
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d3e7      	bcc.n	8002184 <my_mem_perused+0x14>
    }
    return (used*100)/(memtblsize[memx]);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2264      	movs	r2, #100	; 0x64
 80021b8:	fb02 f203 	mul.w	r2, r2, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4906      	ldr	r1, [pc, #24]	; (80021d8 <my_mem_perused+0x68>)
 80021c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	b2db      	uxtb	r3, r3
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000660 	.word	0x20000660
 80021d8:	08003b40 	.word	0x08003b40

080021dc <menu01_buttons_handler>:
uint8_t ldm_flag=0;
uint8_t warehouse_choice=0;

extern BUTTON_S buttons[];

void  menu01_buttons_handler(uint8_t val){
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
	menu01_button_flag=val;
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <menu01_buttons_handler+0x20>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	7013      	strb	r3, [r2, #0]
	menu01_button_new_click=1;
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <menu01_buttons_handler+0x24>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	801a      	strh	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	200009be 	.word	0x200009be
 8002200:	200009c0 	.word	0x200009c0

08002204 <menu01_handler>:

uint8_t menu01_last_button_flag=0;	//只记录小于4的值， 也就是warehouse的按钮

void menu01_handler(){
 8002204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af04      	add	r7, sp, #16
	if(menu01_button_new_click){
 800220c:	4b85      	ldr	r3, [pc, #532]	; (8002424 <menu01_handler+0x220>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 83c6 	beq.w	80029a2 <menu01_handler+0x79e>

		if((menu01_last_button_flag<255)){
 8002216:	4b84      	ldr	r3, [pc, #528]	; (8002428 <menu01_handler+0x224>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2bff      	cmp	r3, #255	; 0xff
 800221c:	d029      	beq.n	8002272 <menu01_handler+0x6e>
			if((carStatus!=warehouseStatus[menu01_last_button_flag])){
 800221e:	4b82      	ldr	r3, [pc, #520]	; (8002428 <menu01_handler+0x224>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4b81      	ldr	r3, [pc, #516]	; (800242c <menu01_handler+0x228>)
 8002226:	5c9a      	ldrb	r2, [r3, r2]
 8002228:	4b81      	ldr	r3, [pc, #516]	; (8002430 <menu01_handler+0x22c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d020      	beq.n	8002272 <menu01_handler+0x6e>
				if(carStatus){
 8002230:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <menu01_handler+0x22c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <menu01_handler+0x52>
					if(menu01_button_flag==5){
 8002238:	4b7e      	ldr	r3, [pc, #504]	; (8002434 <menu01_handler+0x230>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d118      	bne.n	8002272 <menu01_handler+0x6e>
						warehouse_choice=menu01_last_button_flag;
 8002240:	4b79      	ldr	r3, [pc, #484]	; (8002428 <menu01_handler+0x224>)
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	4b7c      	ldr	r3, [pc, #496]	; (8002438 <menu01_handler+0x234>)
 8002246:	701a      	strb	r2, [r3, #0]
						stm_flag=1;
 8002248:	4b7c      	ldr	r3, [pc, #496]	; (800243c <menu01_handler+0x238>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
						menu_flag=2;
 800224e:	4b7c      	ldr	r3, [pc, #496]	; (8002440 <menu01_handler+0x23c>)
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e00d      	b.n	8002272 <menu01_handler+0x6e>
					}
				}else{
					if(menu01_button_flag==4){
 8002256:	4b77      	ldr	r3, [pc, #476]	; (8002434 <menu01_handler+0x230>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d109      	bne.n	8002272 <menu01_handler+0x6e>
						warehouse_choice=menu01_last_button_flag;
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <menu01_handler+0x224>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b75      	ldr	r3, [pc, #468]	; (8002438 <menu01_handler+0x234>)
 8002264:	701a      	strb	r2, [r3, #0]
						ldm_flag=1;
 8002266:	4b77      	ldr	r3, [pc, #476]	; (8002444 <menu01_handler+0x240>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
						menu_flag=2;
 800226c:	4b74      	ldr	r3, [pc, #464]	; (8002440 <menu01_handler+0x23c>)
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
			}
		}else{

		}

		if((menu01_button_flag==7)&&(menu01_last_button_flag<255)){
 8002272:	4b70      	ldr	r3, [pc, #448]	; (8002434 <menu01_handler+0x230>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b07      	cmp	r3, #7
 8002278:	f040 80bc 	bne.w	80023f4 <menu01_handler+0x1f0>
 800227c:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <menu01_handler+0x224>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2bff      	cmp	r3, #255	; 0xff
 8002282:	f000 80b7 	beq.w	80023f4 <menu01_handler+0x1f0>
			warehouseStatus[menu01_last_button_flag]=!warehouseStatus[menu01_last_button_flag];
 8002286:	4b68      	ldr	r3, [pc, #416]	; (8002428 <menu01_handler+0x224>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b67      	ldr	r3, [pc, #412]	; (800242c <menu01_handler+0x228>)
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2d9      	uxtb	r1, r3
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <menu01_handler+0x224>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	4b62      	ldr	r3, [pc, #392]	; (800242c <menu01_handler+0x228>)
 80022a2:	5499      	strb	r1, [r3, r2]

			if(warehouseStatus[menu01_last_button_flag]){
 80022a4:	4b60      	ldr	r3, [pc, #384]	; (8002428 <menu01_handler+0x224>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b60      	ldr	r3, [pc, #384]	; (800242c <menu01_handler+0x228>)
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <menu01_handler+0xca>
				buttons[menu01_last_button_flag].back_color=0xffff;
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <menu01_handler+0x224>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4a63      	ldr	r2, [pc, #396]	; (8002448 <menu01_handler+0x244>)
 80022ba:	460b      	mov	r3, r1
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	330a      	adds	r3, #10
 80022c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	e00b      	b.n	80022e6 <menu01_handler+0xe2>
			}else{
				buttons[menu01_last_button_flag].back_color=0x0000;
 80022ce:	4b56      	ldr	r3, [pc, #344]	; (8002428 <menu01_handler+0x224>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4a5c      	ldr	r2, [pc, #368]	; (8002448 <menu01_handler+0x244>)
 80022d6:	460b      	mov	r3, r1
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	330a      	adds	r3, #10
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
			}
			buttons[7].back_color=buttons[menu01_last_button_flag].back_color;
 80022e6:	4b50      	ldr	r3, [pc, #320]	; (8002428 <menu01_handler+0x224>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4a56      	ldr	r2, [pc, #344]	; (8002448 <menu01_handler+0x244>)
 80022ee:	460b      	mov	r3, r1
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	330a      	adds	r3, #10
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	4b52      	ldr	r3, [pc, #328]	; (8002448 <menu01_handler+0x244>)
 80022fe:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
			drawButton(buttons[menu01_last_button_flag].name, buttons[menu01_last_button_flag].start_x, buttons[menu01_last_button_flag].start_y, buttons[menu01_last_button_flag].end_x, buttons[menu01_last_button_flag].end_y, buttons[menu01_last_button_flag].font_color, buttons[menu01_last_button_flag].back_color, 0xf800);
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <menu01_handler+0x224>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	3310      	adds	r3, #16
 8002312:	4a4d      	ldr	r2, [pc, #308]	; (8002448 <menu01_handler+0x244>)
 8002314:	4413      	add	r3, r2
 8002316:	1d9d      	adds	r5, r3, #6
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <menu01_handler+0x224>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <menu01_handler+0x244>)
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	881e      	ldrh	r6, [r3, #0]
 800232c:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <menu01_handler+0x224>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	4a45      	ldr	r2, [pc, #276]	; (8002448 <menu01_handler+0x244>)
 8002334:	460b      	mov	r3, r1
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	3302      	adds	r3, #2
 8002340:	f8b3 c000 	ldrh.w	ip, [r3]
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <menu01_handler+0x224>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <menu01_handler+0x244>)
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	f8b3 e000 	ldrh.w	lr, [r3]
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <menu01_handler+0x224>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4a39      	ldr	r2, [pc, #228]	; (8002448 <menu01_handler+0x244>)
 8002364:	460b      	mov	r3, r1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	3306      	adds	r3, #6
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <menu01_handler+0x224>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	4933      	ldr	r1, [pc, #204]	; (8002448 <menu01_handler+0x244>)
 800237a:	4603      	mov	r3, r0
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4403      	add	r3, r0
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	3308      	adds	r3, #8
 8002386:	8819      	ldrh	r1, [r3, #0]
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <menu01_handler+0x224>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461c      	mov	r4, r3
 800238e:	482e      	ldr	r0, [pc, #184]	; (8002448 <menu01_handler+0x244>)
 8002390:	4623      	mov	r3, r4
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4423      	add	r3, r4
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4403      	add	r3, r0
 800239a:	330a      	adds	r3, #10
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80023a2:	9003      	str	r0, [sp, #12]
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	9101      	str	r1, [sp, #4]
 80023a8:	9200      	str	r2, [sp, #0]
 80023aa:	4673      	mov	r3, lr
 80023ac:	4662      	mov	r2, ip
 80023ae:	4631      	mov	r1, r6
 80023b0:	4628      	mov	r0, r5
 80023b2:	f7ff fc2f 	bl	8001c14 <drawButton>

			drawButton(buttons[7].name, buttons[7].start_x, buttons[7].start_y, buttons[7].end_x, buttons[7].end_y, buttons[7].font_color, buttons[7].back_color, buttons[7].border_color);
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <menu01_handler+0x244>)
 80023b8:	f8b3 4118 	ldrh.w	r4, [r3, #280]	; 0x118
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <menu01_handler+0x244>)
 80023be:	f8b3 511a 	ldrh.w	r5, [r3, #282]	; 0x11a
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <menu01_handler+0x244>)
 80023c4:	f8b3 611c 	ldrh.w	r6, [r3, #284]	; 0x11c
 80023c8:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <menu01_handler+0x244>)
 80023ca:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <menu01_handler+0x244>)
 80023d0:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80023d4:	491c      	ldr	r1, [pc, #112]	; (8002448 <menu01_handler+0x244>)
 80023d6:	f8b1 1122 	ldrh.w	r1, [r1, #290]	; 0x122
 80023da:	481b      	ldr	r0, [pc, #108]	; (8002448 <menu01_handler+0x244>)
 80023dc:	f8b0 0124 	ldrh.w	r0, [r0, #292]	; 0x124
 80023e0:	9003      	str	r0, [sp, #12]
 80023e2:	9102      	str	r1, [sp, #8]
 80023e4:	9201      	str	r2, [sp, #4]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4633      	mov	r3, r6
 80023ea:	462a      	mov	r2, r5
 80023ec:	4621      	mov	r1, r4
 80023ee:	4817      	ldr	r0, [pc, #92]	; (800244c <menu01_handler+0x248>)
 80023f0:	f7ff fc10 	bl	8001c14 <drawButton>

		}

		if(menu01_button_flag==6){
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <menu01_handler+0x230>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d14c      	bne.n	8002496 <menu01_handler+0x292>
			carStatus=!carStatus;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <menu01_handler+0x22c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <menu01_handler+0x22c>)
 800240e:	701a      	strb	r2, [r3, #0]
			if(carStatus){
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <menu01_handler+0x22c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01b      	beq.n	8002450 <menu01_handler+0x24c>
				buttons[6].back_color=0xffff;
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <menu01_handler+0x244>)
 800241a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 8002422:	e019      	b.n	8002458 <menu01_handler+0x254>
 8002424:	200009c0 	.word	0x200009c0
 8002428:	200009cd 	.word	0x200009cd
 800242c:	200009c4 	.word	0x200009c4
 8002430:	200009c8 	.word	0x200009c8
 8002434:	200009be 	.word	0x200009be
 8002438:	200009cc 	.word	0x200009cc
 800243c:	200009ca 	.word	0x200009ca
 8002440:	200009c9 	.word	0x200009c9
 8002444:	200009cb 	.word	0x200009cb
 8002448:	2000069c 	.word	0x2000069c
 800244c:	200007ca 	.word	0x200007ca
			}else{
				buttons[6].back_color=0x0000;
 8002450:	4bb3      	ldr	r3, [pc, #716]	; (8002720 <menu01_handler+0x51c>)
 8002452:	2200      	movs	r2, #0
 8002454:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
			}
			drawButton(buttons[6].name, buttons[6].start_x, buttons[6].start_y, buttons[6].end_x, buttons[6].end_y, buttons[6].font_color, buttons[6].back_color, buttons[6].border_color);
 8002458:	4bb1      	ldr	r3, [pc, #708]	; (8002720 <menu01_handler+0x51c>)
 800245a:	f8b3 40f0 	ldrh.w	r4, [r3, #240]	; 0xf0
 800245e:	4bb0      	ldr	r3, [pc, #704]	; (8002720 <menu01_handler+0x51c>)
 8002460:	f8b3 50f2 	ldrh.w	r5, [r3, #242]	; 0xf2
 8002464:	4bae      	ldr	r3, [pc, #696]	; (8002720 <menu01_handler+0x51c>)
 8002466:	f8b3 60f4 	ldrh.w	r6, [r3, #244]	; 0xf4
 800246a:	4bad      	ldr	r3, [pc, #692]	; (8002720 <menu01_handler+0x51c>)
 800246c:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8002470:	4aab      	ldr	r2, [pc, #684]	; (8002720 <menu01_handler+0x51c>)
 8002472:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8002476:	49aa      	ldr	r1, [pc, #680]	; (8002720 <menu01_handler+0x51c>)
 8002478:	f8b1 10fa 	ldrh.w	r1, [r1, #250]	; 0xfa
 800247c:	48a8      	ldr	r0, [pc, #672]	; (8002720 <menu01_handler+0x51c>)
 800247e:	f8b0 00fc 	ldrh.w	r0, [r0, #252]	; 0xfc
 8002482:	9003      	str	r0, [sp, #12]
 8002484:	9102      	str	r1, [sp, #8]
 8002486:	9201      	str	r2, [sp, #4]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4633      	mov	r3, r6
 800248c:	462a      	mov	r2, r5
 800248e:	4621      	mov	r1, r4
 8002490:	48a4      	ldr	r0, [pc, #656]	; (8002724 <menu01_handler+0x520>)
 8002492:	f7ff fbbf 	bl	8001c14 <drawButton>
		}

		if((menu01_button_flag!=menu01_last_button_flag)&&(menu01_button_flag<4)){
 8002496:	4ba4      	ldr	r3, [pc, #656]	; (8002728 <menu01_handler+0x524>)
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	4ba4      	ldr	r3, [pc, #656]	; (800272c <menu01_handler+0x528>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	f000 81bd 	beq.w	800281e <menu01_handler+0x61a>
 80024a4:	4ba0      	ldr	r3, [pc, #640]	; (8002728 <menu01_handler+0x524>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	f200 81b8 	bhi.w	800281e <menu01_handler+0x61a>

			buttons[7].back_color = buttons[menu01_button_flag].back_color;
 80024ae:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <menu01_handler+0x524>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4a9a      	ldr	r2, [pc, #616]	; (8002720 <menu01_handler+0x51c>)
 80024b6:	460b      	mov	r3, r1
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	330a      	adds	r3, #10
 80024c2:	881a      	ldrh	r2, [r3, #0]
 80024c4:	4b96      	ldr	r3, [pc, #600]	; (8002720 <menu01_handler+0x51c>)
 80024c6:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122

			if(menu01_last_button_flag<255){
 80024ca:	4b98      	ldr	r3, [pc, #608]	; (800272c <menu01_handler+0x528>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2bff      	cmp	r3, #255	; 0xff
 80024d0:	d063      	beq.n	800259a <menu01_handler+0x396>
				drawButton(buttons[menu01_last_button_flag].name, buttons[menu01_last_button_flag].start_x, buttons[menu01_last_button_flag].start_y, buttons[menu01_last_button_flag].end_x, buttons[menu01_last_button_flag].end_y, buttons[menu01_last_button_flag].font_color, buttons[menu01_last_button_flag].back_color, buttons[menu01_last_button_flag].border_color);
 80024d2:	4b96      	ldr	r3, [pc, #600]	; (800272c <menu01_handler+0x528>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	3310      	adds	r3, #16
 80024e2:	4a8f      	ldr	r2, [pc, #572]	; (8002720 <menu01_handler+0x51c>)
 80024e4:	4413      	add	r3, r2
 80024e6:	1d9e      	adds	r6, r3, #6
 80024e8:	4b90      	ldr	r3, [pc, #576]	; (800272c <menu01_handler+0x528>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	4a8c      	ldr	r2, [pc, #560]	; (8002720 <menu01_handler+0x51c>)
 80024f0:	460b      	mov	r3, r1
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	f8b3 c000 	ldrh.w	ip, [r3]
 80024fe:	4b8b      	ldr	r3, [pc, #556]	; (800272c <menu01_handler+0x528>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4a86      	ldr	r2, [pc, #536]	; (8002720 <menu01_handler+0x51c>)
 8002506:	460b      	mov	r3, r1
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	3302      	adds	r3, #2
 8002512:	f8b3 e000 	ldrh.w	lr, [r3]
 8002516:	4b85      	ldr	r3, [pc, #532]	; (800272c <menu01_handler+0x528>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	4a80      	ldr	r2, [pc, #512]	; (8002720 <menu01_handler+0x51c>)
 800251e:	460b      	mov	r3, r1
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	f8b3 8000 	ldrh.w	r8, [r3]
 800252e:	4b7f      	ldr	r3, [pc, #508]	; (800272c <menu01_handler+0x528>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	4a7a      	ldr	r2, [pc, #488]	; (8002720 <menu01_handler+0x51c>)
 8002536:	460b      	mov	r3, r1
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	3306      	adds	r3, #6
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <menu01_handler+0x528>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	4975      	ldr	r1, [pc, #468]	; (8002720 <menu01_handler+0x51c>)
 800254c:	4603      	mov	r3, r0
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4403      	add	r3, r0
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	3308      	adds	r3, #8
 8002558:	8819      	ldrh	r1, [r3, #0]
 800255a:	4b74      	ldr	r3, [pc, #464]	; (800272c <menu01_handler+0x528>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461c      	mov	r4, r3
 8002560:	486f      	ldr	r0, [pc, #444]	; (8002720 <menu01_handler+0x51c>)
 8002562:	4623      	mov	r3, r4
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4423      	add	r3, r4
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4403      	add	r3, r0
 800256c:	330a      	adds	r3, #10
 800256e:	8818      	ldrh	r0, [r3, #0]
 8002570:	4b6e      	ldr	r3, [pc, #440]	; (800272c <menu01_handler+0x528>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461d      	mov	r5, r3
 8002576:	4c6a      	ldr	r4, [pc, #424]	; (8002720 <menu01_handler+0x51c>)
 8002578:	462b      	mov	r3, r5
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	442b      	add	r3, r5
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4423      	add	r3, r4
 8002582:	330c      	adds	r3, #12
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	9303      	str	r3, [sp, #12]
 8002588:	9002      	str	r0, [sp, #8]
 800258a:	9101      	str	r1, [sp, #4]
 800258c:	9200      	str	r2, [sp, #0]
 800258e:	4643      	mov	r3, r8
 8002590:	4672      	mov	r2, lr
 8002592:	4661      	mov	r1, ip
 8002594:	4630      	mov	r0, r6
 8002596:	f7ff fb3d 	bl	8001c14 <drawButton>
			}
			menu01_last_button_flag = menu01_button_flag;
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <menu01_handler+0x524>)
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <menu01_handler+0x528>)
 80025a0:	701a      	strb	r2, [r3, #0]

			drawButton(buttons[menu01_button_flag].name, buttons[menu01_button_flag].start_x, buttons[menu01_button_flag].start_y, buttons[menu01_button_flag].end_x, buttons[menu01_button_flag].end_y, buttons[menu01_button_flag].font_color, buttons[menu01_button_flag].back_color, 0xf800);
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <menu01_handler+0x524>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	3310      	adds	r3, #16
 80025b2:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <menu01_handler+0x51c>)
 80025b4:	4413      	add	r3, r2
 80025b6:	1d9d      	adds	r5, r3, #6
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <menu01_handler+0x524>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <menu01_handler+0x51c>)
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	881e      	ldrh	r6, [r3, #0]
 80025cc:	4b56      	ldr	r3, [pc, #344]	; (8002728 <menu01_handler+0x524>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	4a53      	ldr	r2, [pc, #332]	; (8002720 <menu01_handler+0x51c>)
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	3302      	adds	r3, #2
 80025e0:	f8b3 c000 	ldrh.w	ip, [r3]
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <menu01_handler+0x524>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4619      	mov	r1, r3
 80025ea:	4a4d      	ldr	r2, [pc, #308]	; (8002720 <menu01_handler+0x51c>)
 80025ec:	460b      	mov	r3, r1
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	f8b3 e000 	ldrh.w	lr, [r3]
 80025fc:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <menu01_handler+0x524>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	4a47      	ldr	r2, [pc, #284]	; (8002720 <menu01_handler+0x51c>)
 8002604:	460b      	mov	r3, r1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	3306      	adds	r3, #6
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	4b45      	ldr	r3, [pc, #276]	; (8002728 <menu01_handler+0x524>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	4941      	ldr	r1, [pc, #260]	; (8002720 <menu01_handler+0x51c>)
 800261a:	4603      	mov	r3, r0
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4403      	add	r3, r0
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	3308      	adds	r3, #8
 8002626:	8819      	ldrh	r1, [r3, #0]
 8002628:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <menu01_handler+0x524>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461c      	mov	r4, r3
 800262e:	483c      	ldr	r0, [pc, #240]	; (8002720 <menu01_handler+0x51c>)
 8002630:	4623      	mov	r3, r4
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4423      	add	r3, r4
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4403      	add	r3, r0
 800263a:	330a      	adds	r3, #10
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002642:	9003      	str	r0, [sp, #12]
 8002644:	9302      	str	r3, [sp, #8]
 8002646:	9101      	str	r1, [sp, #4]
 8002648:	9200      	str	r2, [sp, #0]
 800264a:	4673      	mov	r3, lr
 800264c:	4662      	mov	r2, ip
 800264e:	4631      	mov	r1, r6
 8002650:	4628      	mov	r0, r5
 8002652:	f7ff fadf 	bl	8001c14 <drawButton>
			drawButton(buttons[7].name, buttons[7].start_x, buttons[7].start_y, buttons[7].end_x, buttons[7].end_y, buttons[7].font_color, buttons[7].back_color, buttons[7].border_color);
 8002656:	4b32      	ldr	r3, [pc, #200]	; (8002720 <menu01_handler+0x51c>)
 8002658:	f8b3 4118 	ldrh.w	r4, [r3, #280]	; 0x118
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <menu01_handler+0x51c>)
 800265e:	f8b3 511a 	ldrh.w	r5, [r3, #282]	; 0x11a
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <menu01_handler+0x51c>)
 8002664:	f8b3 611c 	ldrh.w	r6, [r3, #284]	; 0x11c
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <menu01_handler+0x51c>)
 800266a:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 800266e:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <menu01_handler+0x51c>)
 8002670:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8002674:	492a      	ldr	r1, [pc, #168]	; (8002720 <menu01_handler+0x51c>)
 8002676:	f8b1 1122 	ldrh.w	r1, [r1, #290]	; 0x122
 800267a:	4829      	ldr	r0, [pc, #164]	; (8002720 <menu01_handler+0x51c>)
 800267c:	f8b0 0124 	ldrh.w	r0, [r0, #292]	; 0x124
 8002680:	9003      	str	r0, [sp, #12]
 8002682:	9102      	str	r1, [sp, #8]
 8002684:	9201      	str	r2, [sp, #4]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	4633      	mov	r3, r6
 800268a:	462a      	mov	r2, r5
 800268c:	4621      	mov	r1, r4
 800268e:	4828      	ldr	r0, [pc, #160]	; (8002730 <menu01_handler+0x52c>)
 8002690:	f7ff fac0 	bl	8001c14 <drawButton>

			if(carStatus!=warehouseStatus[menu01_button_flag]){
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <menu01_handler+0x524>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <menu01_handler+0x530>)
 800269c:	5c9a      	ldrb	r2, [r3, r2]
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <menu01_handler+0x534>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	f000 8085 	beq.w	80027b2 <menu01_handler+0x5ae>
				//	drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, buttons[5].font_color, buttons[5].back_color, buttons[5].border_color);
				if(carStatus){	//状态， 0为空， 1为满
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <menu01_handler+0x534>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d049      	beq.n	8002744 <menu01_handler+0x540>
					drawButton(buttons[4].name, buttons[4].start_x, buttons[4].start_y, buttons[4].end_x, buttons[4].end_y, 0x3800, 0x39e7, 0x01e0);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <menu01_handler+0x51c>)
 80026b2:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <menu01_handler+0x51c>)
 80026b8:	f8b3 00a2 	ldrh.w	r0, [r3, #162]	; 0xa2
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <menu01_handler+0x51c>)
 80026be:	f8b3 40a4 	ldrh.w	r4, [r3, #164]	; 0xa4
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <menu01_handler+0x51c>)
 80026c4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80026c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026cc:	9203      	str	r2, [sp, #12]
 80026ce:	f643 12e7 	movw	r2, #14823	; 0x39e7
 80026d2:	9202      	str	r2, [sp, #8]
 80026d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026d8:	9201      	str	r2, [sp, #4]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4623      	mov	r3, r4
 80026de:	4602      	mov	r2, r0
 80026e0:	4816      	ldr	r0, [pc, #88]	; (800273c <menu01_handler+0x538>)
 80026e2:	f7ff fa97 	bl	8001c14 <drawButton>
					drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, 0xf800, 0xffff, 0x07e0);
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <menu01_handler+0x51c>)
 80026e8:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <menu01_handler+0x51c>)
 80026ee:	f8b3 00ca 	ldrh.w	r0, [r3, #202]	; 0xca
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <menu01_handler+0x51c>)
 80026f4:	f8b3 40cc 	ldrh.w	r4, [r3, #204]	; 0xcc
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <menu01_handler+0x51c>)
 80026fa:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80026fe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002702:	9203      	str	r2, [sp, #12]
 8002704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002708:	9202      	str	r2, [sp, #8]
 800270a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800270e:	9201      	str	r2, [sp, #4]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4623      	mov	r3, r4
 8002714:	4602      	mov	r2, r0
 8002716:	480a      	ldr	r0, [pc, #40]	; (8002740 <menu01_handler+0x53c>)
 8002718:	f7ff fa7c 	bl	8001c14 <drawButton>
 800271c:	e07f      	b.n	800281e <menu01_handler+0x61a>
 800271e:	bf00      	nop
 8002720:	2000069c 	.word	0x2000069c
 8002724:	200007a2 	.word	0x200007a2
 8002728:	200009be 	.word	0x200009be
 800272c:	200009cd 	.word	0x200009cd
 8002730:	200007ca 	.word	0x200007ca
 8002734:	200009c4 	.word	0x200009c4
 8002738:	200009c8 	.word	0x200009c8
 800273c:	20000752 	.word	0x20000752
 8002740:	2000077a 	.word	0x2000077a
				}else{
					drawButton(buttons[4].name, buttons[4].start_x, buttons[4].start_y, buttons[4].end_x, buttons[4].end_y, 0xf800, 0xffff, 0x07e0);
 8002744:	4b99      	ldr	r3, [pc, #612]	; (80029ac <menu01_handler+0x7a8>)
 8002746:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 800274a:	4b98      	ldr	r3, [pc, #608]	; (80029ac <menu01_handler+0x7a8>)
 800274c:	f8b3 00a2 	ldrh.w	r0, [r3, #162]	; 0xa2
 8002750:	4b96      	ldr	r3, [pc, #600]	; (80029ac <menu01_handler+0x7a8>)
 8002752:	f8b3 40a4 	ldrh.w	r4, [r3, #164]	; 0xa4
 8002756:	4b95      	ldr	r3, [pc, #596]	; (80029ac <menu01_handler+0x7a8>)
 8002758:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800275c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002760:	9203      	str	r2, [sp, #12]
 8002762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002766:	9202      	str	r2, [sp, #8]
 8002768:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	4623      	mov	r3, r4
 8002772:	4602      	mov	r2, r0
 8002774:	488e      	ldr	r0, [pc, #568]	; (80029b0 <menu01_handler+0x7ac>)
 8002776:	f7ff fa4d 	bl	8001c14 <drawButton>
					drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, 0x3800, 0x39e7, 0x01e0);
 800277a:	4b8c      	ldr	r3, [pc, #560]	; (80029ac <menu01_handler+0x7a8>)
 800277c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 8002780:	4b8a      	ldr	r3, [pc, #552]	; (80029ac <menu01_handler+0x7a8>)
 8002782:	f8b3 00ca 	ldrh.w	r0, [r3, #202]	; 0xca
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <menu01_handler+0x7a8>)
 8002788:	f8b3 40cc 	ldrh.w	r4, [r3, #204]	; 0xcc
 800278c:	4b87      	ldr	r3, [pc, #540]	; (80029ac <menu01_handler+0x7a8>)
 800278e:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8002792:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002796:	9203      	str	r2, [sp, #12]
 8002798:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800279c:	9202      	str	r2, [sp, #8]
 800279e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027a2:	9201      	str	r2, [sp, #4]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4623      	mov	r3, r4
 80027a8:	4602      	mov	r2, r0
 80027aa:	4882      	ldr	r0, [pc, #520]	; (80029b4 <menu01_handler+0x7b0>)
 80027ac:	f7ff fa32 	bl	8001c14 <drawButton>
 80027b0:	e035      	b.n	800281e <menu01_handler+0x61a>
				}
			}else{
				drawButton(buttons[4].name, buttons[4].start_x, buttons[4].start_y, buttons[4].end_x, buttons[4].end_y, 0x3800, 0x39e7, 0x01e0);
 80027b2:	4b7e      	ldr	r3, [pc, #504]	; (80029ac <menu01_handler+0x7a8>)
 80027b4:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 80027b8:	4b7c      	ldr	r3, [pc, #496]	; (80029ac <menu01_handler+0x7a8>)
 80027ba:	f8b3 00a2 	ldrh.w	r0, [r3, #162]	; 0xa2
 80027be:	4b7b      	ldr	r3, [pc, #492]	; (80029ac <menu01_handler+0x7a8>)
 80027c0:	f8b3 40a4 	ldrh.w	r4, [r3, #164]	; 0xa4
 80027c4:	4b79      	ldr	r3, [pc, #484]	; (80029ac <menu01_handler+0x7a8>)
 80027c6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80027ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80027ce:	9203      	str	r2, [sp, #12]
 80027d0:	f643 12e7 	movw	r2, #14823	; 0x39e7
 80027d4:	9202      	str	r2, [sp, #8]
 80027d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4623      	mov	r3, r4
 80027e0:	4602      	mov	r2, r0
 80027e2:	4873      	ldr	r0, [pc, #460]	; (80029b0 <menu01_handler+0x7ac>)
 80027e4:	f7ff fa16 	bl	8001c14 <drawButton>
				drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, 0x3800, 0x39e7, 0x01e0);
 80027e8:	4b70      	ldr	r3, [pc, #448]	; (80029ac <menu01_handler+0x7a8>)
 80027ea:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 80027ee:	4b6f      	ldr	r3, [pc, #444]	; (80029ac <menu01_handler+0x7a8>)
 80027f0:	f8b3 00ca 	ldrh.w	r0, [r3, #202]	; 0xca
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <menu01_handler+0x7a8>)
 80027f6:	f8b3 40cc 	ldrh.w	r4, [r3, #204]	; 0xcc
 80027fa:	4b6c      	ldr	r3, [pc, #432]	; (80029ac <menu01_handler+0x7a8>)
 80027fc:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8002800:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002804:	9203      	str	r2, [sp, #12]
 8002806:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800280a:	9202      	str	r2, [sp, #8]
 800280c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002810:	9201      	str	r2, [sp, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4623      	mov	r3, r4
 8002816:	4602      	mov	r2, r0
 8002818:	4866      	ldr	r0, [pc, #408]	; (80029b4 <menu01_handler+0x7b0>)
 800281a:	f7ff f9fb 	bl	8001c14 <drawButton>
			}
		}

		if(((menu01_button_flag==6)||(menu01_button_flag==7))&&(menu01_last_button_flag<255)){
 800281e:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <menu01_handler+0x7b4>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b06      	cmp	r3, #6
 8002824:	d004      	beq.n	8002830 <menu01_handler+0x62c>
 8002826:	4b64      	ldr	r3, [pc, #400]	; (80029b8 <menu01_handler+0x7b4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b07      	cmp	r3, #7
 800282c:	f040 80b6 	bne.w	800299c <menu01_handler+0x798>
 8002830:	4b62      	ldr	r3, [pc, #392]	; (80029bc <menu01_handler+0x7b8>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2bff      	cmp	r3, #255	; 0xff
 8002836:	f000 80b1 	beq.w	800299c <menu01_handler+0x798>
			if(carStatus!=warehouseStatus[menu01_last_button_flag]){
 800283a:	4b60      	ldr	r3, [pc, #384]	; (80029bc <menu01_handler+0x7b8>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <menu01_handler+0x7bc>)
 8002842:	5c9a      	ldrb	r2, [r3, r2]
 8002844:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <menu01_handler+0x7c0>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d071      	beq.n	8002930 <menu01_handler+0x72c>
				//	drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, buttons[5].font_color, buttons[5].back_color, buttons[5].border_color);
				if(carStatus){	//状态， 0为空， 1为满
 800284c:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <menu01_handler+0x7c0>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d036      	beq.n	80028c2 <menu01_handler+0x6be>
					drawButton(buttons[4].name, buttons[4].start_x, buttons[4].start_y, buttons[4].end_x, buttons[4].end_y, 0x3800, 0x39e7, 0x01e0);
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <menu01_handler+0x7a8>)
 8002856:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <menu01_handler+0x7a8>)
 800285c:	f8b3 00a2 	ldrh.w	r0, [r3, #162]	; 0xa2
 8002860:	4b52      	ldr	r3, [pc, #328]	; (80029ac <menu01_handler+0x7a8>)
 8002862:	f8b3 40a4 	ldrh.w	r4, [r3, #164]	; 0xa4
 8002866:	4b51      	ldr	r3, [pc, #324]	; (80029ac <menu01_handler+0x7a8>)
 8002868:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800286c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002870:	9203      	str	r2, [sp, #12]
 8002872:	f643 12e7 	movw	r2, #14823	; 0x39e7
 8002876:	9202      	str	r2, [sp, #8]
 8002878:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800287c:	9201      	str	r2, [sp, #4]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4623      	mov	r3, r4
 8002882:	4602      	mov	r2, r0
 8002884:	484a      	ldr	r0, [pc, #296]	; (80029b0 <menu01_handler+0x7ac>)
 8002886:	f7ff f9c5 	bl	8001c14 <drawButton>
					drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, 0xf800, 0xffff, 0x07e0);
 800288a:	4b48      	ldr	r3, [pc, #288]	; (80029ac <menu01_handler+0x7a8>)
 800288c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 8002890:	4b46      	ldr	r3, [pc, #280]	; (80029ac <menu01_handler+0x7a8>)
 8002892:	f8b3 00ca 	ldrh.w	r0, [r3, #202]	; 0xca
 8002896:	4b45      	ldr	r3, [pc, #276]	; (80029ac <menu01_handler+0x7a8>)
 8002898:	f8b3 40cc 	ldrh.w	r4, [r3, #204]	; 0xcc
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <menu01_handler+0x7a8>)
 800289e:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80028a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028a6:	9203      	str	r2, [sp, #12]
 80028a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ac:	9202      	str	r2, [sp, #8]
 80028ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4623      	mov	r3, r4
 80028b8:	4602      	mov	r2, r0
 80028ba:	483e      	ldr	r0, [pc, #248]	; (80029b4 <menu01_handler+0x7b0>)
 80028bc:	f7ff f9aa 	bl	8001c14 <drawButton>
 80028c0:	e06c      	b.n	800299c <menu01_handler+0x798>
				}else{
					drawButton(buttons[4].name, buttons[4].start_x, buttons[4].start_y, buttons[4].end_x, buttons[4].end_y, 0xf800, 0xffff, 0x07e0);
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <menu01_handler+0x7a8>)
 80028c4:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <menu01_handler+0x7a8>)
 80028ca:	f8b3 00a2 	ldrh.w	r0, [r3, #162]	; 0xa2
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <menu01_handler+0x7a8>)
 80028d0:	f8b3 40a4 	ldrh.w	r4, [r3, #164]	; 0xa4
 80028d4:	4b35      	ldr	r3, [pc, #212]	; (80029ac <menu01_handler+0x7a8>)
 80028d6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80028da:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028de:	9203      	str	r2, [sp, #12]
 80028e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e4:	9202      	str	r2, [sp, #8]
 80028e6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028ea:	9201      	str	r2, [sp, #4]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4623      	mov	r3, r4
 80028f0:	4602      	mov	r2, r0
 80028f2:	482f      	ldr	r0, [pc, #188]	; (80029b0 <menu01_handler+0x7ac>)
 80028f4:	f7ff f98e 	bl	8001c14 <drawButton>
					drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, 0x3800, 0x39e7, 0x01e0);
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <menu01_handler+0x7a8>)
 80028fa:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 80028fe:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <menu01_handler+0x7a8>)
 8002900:	f8b3 00ca 	ldrh.w	r0, [r3, #202]	; 0xca
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <menu01_handler+0x7a8>)
 8002906:	f8b3 40cc 	ldrh.w	r4, [r3, #204]	; 0xcc
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <menu01_handler+0x7a8>)
 800290c:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8002910:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002914:	9203      	str	r2, [sp, #12]
 8002916:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800291a:	9202      	str	r2, [sp, #8]
 800291c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002920:	9201      	str	r2, [sp, #4]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	4623      	mov	r3, r4
 8002926:	4602      	mov	r2, r0
 8002928:	4822      	ldr	r0, [pc, #136]	; (80029b4 <menu01_handler+0x7b0>)
 800292a:	f7ff f973 	bl	8001c14 <drawButton>
 800292e:	e035      	b.n	800299c <menu01_handler+0x798>
				}
			}else{
				drawButton(buttons[4].name, buttons[4].start_x, buttons[4].start_y, buttons[4].end_x, buttons[4].end_y, 0x3800, 0x39e7, 0x01e0);
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <menu01_handler+0x7a8>)
 8002932:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <menu01_handler+0x7a8>)
 8002938:	f8b3 00a2 	ldrh.w	r0, [r3, #162]	; 0xa2
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <menu01_handler+0x7a8>)
 800293e:	f8b3 40a4 	ldrh.w	r4, [r3, #164]	; 0xa4
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <menu01_handler+0x7a8>)
 8002944:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002948:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800294c:	9203      	str	r2, [sp, #12]
 800294e:	f643 12e7 	movw	r2, #14823	; 0x39e7
 8002952:	9202      	str	r2, [sp, #8]
 8002954:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002958:	9201      	str	r2, [sp, #4]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4623      	mov	r3, r4
 800295e:	4602      	mov	r2, r0
 8002960:	4813      	ldr	r0, [pc, #76]	; (80029b0 <menu01_handler+0x7ac>)
 8002962:	f7ff f957 	bl	8001c14 <drawButton>
				drawButton(buttons[5].name, buttons[5].start_x, buttons[5].start_y, buttons[5].end_x, buttons[5].end_y, 0x3800, 0x39e7, 0x01e0);
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <menu01_handler+0x7a8>)
 8002968:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <menu01_handler+0x7a8>)
 800296e:	f8b3 00ca 	ldrh.w	r0, [r3, #202]	; 0xca
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <menu01_handler+0x7a8>)
 8002974:	f8b3 40cc 	ldrh.w	r4, [r3, #204]	; 0xcc
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <menu01_handler+0x7a8>)
 800297a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 800297e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002982:	9203      	str	r2, [sp, #12]
 8002984:	f643 12e7 	movw	r2, #14823	; 0x39e7
 8002988:	9202      	str	r2, [sp, #8]
 800298a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800298e:	9201      	str	r2, [sp, #4]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4623      	mov	r3, r4
 8002994:	4602      	mov	r2, r0
 8002996:	4807      	ldr	r0, [pc, #28]	; (80029b4 <menu01_handler+0x7b0>)
 8002998:	f7ff f93c 	bl	8001c14 <drawButton>
			}
		}



		menu01_button_new_click=0;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <menu01_handler+0x7c4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]
	}
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029aa:	bf00      	nop
 80029ac:	2000069c 	.word	0x2000069c
 80029b0:	20000752 	.word	0x20000752
 80029b4:	2000077a 	.word	0x2000077a
 80029b8:	200009be 	.word	0x200009be
 80029bc:	200009cd 	.word	0x200009cd
 80029c0:	200009c4 	.word	0x200009c4
 80029c4:	200009c8 	.word	0x200009c8
 80029c8:	200009c0 	.word	0x200009c0

080029cc <GUI_Menu01_Create>:



void GUI_Menu01_Create(void(*menu_handler)(), uint8_t id){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af06      	add	r7, sp, #24
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
	buttons_counter=0;
 80029d8:	4b81      	ldr	r3, [pc, #516]	; (8002be0 <GUI_Menu01_Create+0x214>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
	gui_menus_counter=0;
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <GUI_Menu01_Create+0x218>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
	menu01_last_button_flag=255;
 80029e4:	4b80      	ldr	r3, [pc, #512]	; (8002be8 <GUI_Menu01_Create+0x21c>)
 80029e6:	22ff      	movs	r2, #255	; 0xff
 80029e8:	701a      	strb	r2, [r3, #0]
	clearScreen(0x0000);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fe fe0d 	bl	800160a <clearScreen>
	warehouse_choice=255;
 80029f0:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <GUI_Menu01_Create+0x220>)
 80029f2:	22ff      	movs	r2, #255	; 0xff
 80029f4:	701a      	strb	r2, [r3, #0]

	uint32_t tmpColor=0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
	if(warehouseStatus[0]){
 80029fa:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <GUI_Menu01_Create+0x224>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <GUI_Menu01_Create+0x3e>
		tmpColor=0xffff;
 8002a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e001      	b.n	8002a0e <GUI_Menu01_Create+0x42>
	}else{
		tmpColor=0x0000;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
	}
	ButtonCreate("FIRST", buttons_counter, 5, 100, 55, 130, menu01_buttons_handler, 0xf800, tmpColor, 0x07e0);
 8002a0e:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002a10:	7819      	ldrb	r1, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a1a:	9205      	str	r2, [sp, #20]
 8002a1c:	9304      	str	r3, [sp, #16]
 8002a1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a22:	9303      	str	r3, [sp, #12]
 8002a24:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	2382      	movs	r3, #130	; 0x82
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	2337      	movs	r3, #55	; 0x37
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2364      	movs	r3, #100	; 0x64
 8002a32:	2205      	movs	r2, #5
 8002a34:	4870      	ldr	r0, [pc, #448]	; (8002bf8 <GUI_Menu01_Create+0x22c>)
 8002a36:	f7ff f957 	bl	8001ce8 <ButtonCreate>
	if(warehouseStatus[1]){
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <GUI_Menu01_Create+0x224>)
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <GUI_Menu01_Create+0x7e>
		tmpColor=0xffff;
 8002a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e001      	b.n	8002a4e <GUI_Menu01_Create+0x82>
	}else{
		tmpColor=0x0000;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
	}
	ButtonCreate("SECOND", buttons_counter, 5+60, 100, 55+60, 130, menu01_buttons_handler, 0xf800, tmpColor, 0x07e0);
 8002a4e:	4b64      	ldr	r3, [pc, #400]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002a50:	7819      	ldrb	r1, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a5a:	9205      	str	r2, [sp, #20]
 8002a5c:	9304      	str	r3, [sp, #16]
 8002a5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a62:	9303      	str	r3, [sp, #12]
 8002a64:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2382      	movs	r3, #130	; 0x82
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2373      	movs	r3, #115	; 0x73
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2364      	movs	r3, #100	; 0x64
 8002a72:	2241      	movs	r2, #65	; 0x41
 8002a74:	4861      	ldr	r0, [pc, #388]	; (8002bfc <GUI_Menu01_Create+0x230>)
 8002a76:	f7ff f937 	bl	8001ce8 <ButtonCreate>
	if(warehouseStatus[2]){
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	; (8002bf0 <GUI_Menu01_Create+0x224>)
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <GUI_Menu01_Create+0xbe>
		tmpColor=0xffff;
 8002a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e001      	b.n	8002a8e <GUI_Menu01_Create+0xc2>
	}else{
		tmpColor=0x0000;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
	}
	ButtonCreate("THIRD", buttons_counter, 5+60*2, 100, 55+60*2, 130, menu01_buttons_handler, 0xf800, tmpColor, 0x07e0);
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002a90:	7819      	ldrb	r1, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a9a:	9205      	str	r2, [sp, #20]
 8002a9c:	9304      	str	r3, [sp, #16]
 8002a9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002aa2:	9303      	str	r3, [sp, #12]
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	2382      	movs	r3, #130	; 0x82
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	23af      	movs	r3, #175	; 0xaf
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2364      	movs	r3, #100	; 0x64
 8002ab2:	227d      	movs	r2, #125	; 0x7d
 8002ab4:	4852      	ldr	r0, [pc, #328]	; (8002c00 <GUI_Menu01_Create+0x234>)
 8002ab6:	f7ff f917 	bl	8001ce8 <ButtonCreate>
	if(warehouseStatus[3]){
 8002aba:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <GUI_Menu01_Create+0x224>)
 8002abc:	78db      	ldrb	r3, [r3, #3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <GUI_Menu01_Create+0xfe>
		tmpColor=0xffff;
 8002ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e001      	b.n	8002ace <GUI_Menu01_Create+0x102>
	}else{
		tmpColor=0x0000;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
	}
	ButtonCreate("FOURTH", buttons_counter, 5+60*3, 100, 55+60*3, 130, menu01_buttons_handler, 0xf800, tmpColor, 0x07e0);
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002ad0:	7819      	ldrb	r1, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ada:	9205      	str	r2, [sp, #20]
 8002adc:	9304      	str	r3, [sp, #16]
 8002ade:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ae2:	9303      	str	r3, [sp, #12]
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	2382      	movs	r3, #130	; 0x82
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	23eb      	movs	r3, #235	; 0xeb
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2364      	movs	r3, #100	; 0x64
 8002af2:	22b9      	movs	r2, #185	; 0xb9
 8002af4:	4843      	ldr	r0, [pc, #268]	; (8002c04 <GUI_Menu01_Create+0x238>)
 8002af6:	f7ff f8f7 	bl	8001ce8 <ButtonCreate>

	ButtonCreate("LDM", buttons_counter, 45, 100+60, 115, 130+70, menu01_buttons_handler, 0x3800, 0x39e7, 0x01e0);
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002afc:	7819      	ldrb	r1, [r3, #0]
 8002afe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b02:	9305      	str	r3, [sp, #20]
 8002b04:	f643 13e7 	movw	r3, #14823	; 0x39e7
 8002b08:	9304      	str	r3, [sp, #16]
 8002b0a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b0e:	9303      	str	r3, [sp, #12]
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002b12:	9302      	str	r3, [sp, #8]
 8002b14:	23c8      	movs	r3, #200	; 0xc8
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	2373      	movs	r3, #115	; 0x73
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	23a0      	movs	r3, #160	; 0xa0
 8002b1e:	222d      	movs	r2, #45	; 0x2d
 8002b20:	4839      	ldr	r0, [pc, #228]	; (8002c08 <GUI_Menu01_Create+0x23c>)
 8002b22:	f7ff f8e1 	bl	8001ce8 <ButtonCreate>
	ButtonCreate("STM", buttons_counter, 125, 100+60, 195, 130+70, menu01_buttons_handler, 0x3800, 0x39e7, 0x01e0);
 8002b26:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002b28:	7819      	ldrb	r1, [r3, #0]
 8002b2a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b2e:	9305      	str	r3, [sp, #20]
 8002b30:	f643 13e7 	movw	r3, #14823	; 0x39e7
 8002b34:	9304      	str	r3, [sp, #16]
 8002b36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002b3a:	9303      	str	r3, [sp, #12]
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002b3e:	9302      	str	r3, [sp, #8]
 8002b40:	23c8      	movs	r3, #200	; 0xc8
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	23c3      	movs	r3, #195	; 0xc3
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	23a0      	movs	r3, #160	; 0xa0
 8002b4a:	227d      	movs	r2, #125	; 0x7d
 8002b4c:	482f      	ldr	r0, [pc, #188]	; (8002c0c <GUI_Menu01_Create+0x240>)
 8002b4e:	f7ff f8cb 	bl	8001ce8 <ButtonCreate>

	if(carStatus){
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <GUI_Menu01_Create+0x244>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <GUI_Menu01_Create+0x196>
		tmpColor=0xffff;
 8002b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e001      	b.n	8002b66 <GUI_Menu01_Create+0x19a>
	}else{
		tmpColor=0x0000;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
	}

	ButtonCreate("Car Status", buttons_counter, 25, 240, 95, 280, menu01_buttons_handler, 0xf800, tmpColor, 0x7e0);	//ID = 6
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002b68:	7819      	ldrb	r1, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b72:	9205      	str	r2, [sp, #20]
 8002b74:	9304      	str	r3, [sp, #16]
 8002b76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b7a:	9303      	str	r3, [sp, #12]
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	235f      	movs	r3, #95	; 0x5f
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	23f0      	movs	r3, #240	; 0xf0
 8002b8c:	2219      	movs	r2, #25
 8002b8e:	4821      	ldr	r0, [pc, #132]	; (8002c14 <GUI_Menu01_Create+0x248>)
 8002b90:	f7ff f8aa 	bl	8001ce8 <ButtonCreate>
	ButtonCreate("War Status", buttons_counter, 145, 240, 215, 280, menu01_buttons_handler, 0xf800, tmpColor, 0x7e0);	//ID = 7
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <GUI_Menu01_Create+0x214>)
 8002b96:	7819      	ldrb	r1, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ba0:	9205      	str	r2, [sp, #20]
 8002ba2:	9304      	str	r3, [sp, #16]
 8002ba4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ba8:	9303      	str	r3, [sp, #12]
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <GUI_Menu01_Create+0x228>)
 8002bac:	9302      	str	r3, [sp, #8]
 8002bae:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	23d7      	movs	r3, #215	; 0xd7
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	23f0      	movs	r3, #240	; 0xf0
 8002bba:	2291      	movs	r2, #145	; 0x91
 8002bbc:	4816      	ldr	r0, [pc, #88]	; (8002c18 <GUI_Menu01_Create+0x24c>)
 8002bbe:	f7ff f893 	bl	8001ce8 <ButtonCreate>


	gui_menus[id].menu_handler=menu_handler;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	4915      	ldr	r1, [pc, #84]	; (8002c1c <GUI_Menu01_Create+0x250>)
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	gui_menus_counter++;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <GUI_Menu01_Create+0x218>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <GUI_Menu01_Create+0x218>)
 8002bd6:	701a      	strb	r2, [r3, #0]

}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200009bc 	.word	0x200009bc
 8002be4:	200009bd 	.word	0x200009bd
 8002be8:	200009cd 	.word	0x200009cd
 8002bec:	200009cc 	.word	0x200009cc
 8002bf0:	200009c4 	.word	0x200009c4
 8002bf4:	080021dd 	.word	0x080021dd
 8002bf8:	08003ab4 	.word	0x08003ab4
 8002bfc:	08003abc 	.word	0x08003abc
 8002c00:	08003ac4 	.word	0x08003ac4
 8002c04:	08003acc 	.word	0x08003acc
 8002c08:	08003ad4 	.word	0x08003ad4
 8002c0c:	08003ad8 	.word	0x08003ad8
 8002c10:	200009c8 	.word	0x200009c8
 8002c14:	08003adc 	.word	0x08003adc
 8002c18:	08003ae8 	.word	0x08003ae8
 8002c1c:	200051e0 	.word	0x200051e0

08002c20 <GUI_Menu01_Scan>:

void GUI_Menu01_Scan(){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	ScreenScan();
 8002c24:	f7ff f90e 	bl	8001e44 <ScreenScan>
	Button_dothings();
 8002c28:	f7ff fa16 	bl	8002058 <Button_dothings>
	gui_menus[0].menu_handler();
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <GUI_Menu01_Scan+0x18>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4798      	blx	r3
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200051e0 	.word	0x200051e0

08002c3c <Menu01_loop>:


void Menu01_loop(){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0

	if(menu_flag==1){
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <Menu01_loop+0x28>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10a      	bne.n	8002c5e <Menu01_loop+0x22>
		GUI_Menu01_Create(menu01_handler, 0);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4807      	ldr	r0, [pc, #28]	; (8002c68 <Menu01_loop+0x2c>)
 8002c4c:	f7ff febe 	bl	80029cc <GUI_Menu01_Create>

		while(menu_flag==1){
 8002c50:	e001      	b.n	8002c56 <Menu01_loop+0x1a>
			GUI_Menu01_Scan();
 8002c52:	f7ff ffe5 	bl	8002c20 <GUI_Menu01_Scan>
		while(menu_flag==1){
 8002c56:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <Menu01_loop+0x28>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d0f9      	beq.n	8002c52 <Menu01_loop+0x16>
		}
	}
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200009c9 	.word	0x200009c9
 8002c68:	08002205 	.word	0x08002205

08002c6c <Menu02_handler>:

uint8_t car_location=0;

void Menu02_handler(){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	delay_ms(1000);
 8002c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c74:	f7fe fb1c 	bl	80012b0 <delay_ms>
	if(stm_flag){
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <Menu02_handler+0x58>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <Menu02_handler+0x2c>
		stm_flag=0;
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <Menu02_handler+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
		warehouseStatus[warehouse_choice]=1;
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <Menu02_handler+0x5c>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <Menu02_handler+0x60>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
		carStatus=0;
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <Menu02_handler+0x64>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
	}

	if(ldm_flag){
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <Menu02_handler+0x68>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <Menu02_handler+0x4c>
		ldm_flag=0;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <Menu02_handler+0x68>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
		warehouseStatus[warehouse_choice]=0;
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <Menu02_handler+0x5c>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <Menu02_handler+0x60>)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]
		carStatus=1;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <Menu02_handler+0x64>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
	}

	menu_flag=1;
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <Menu02_handler+0x6c>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]

}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200009ca 	.word	0x200009ca
 8002cc8:	200009cc 	.word	0x200009cc
 8002ccc:	200009c4 	.word	0x200009c4
 8002cd0:	200009c8 	.word	0x200009c8
 8002cd4:	200009cb 	.word	0x200009cb
 8002cd8:	200009c9 	.word	0x200009c9

08002cdc <GUI_Menu02_Scan>:

void GUI_Menu02_Scan(){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	ScreenScan();
 8002ce0:	f7ff f8b0 	bl	8001e44 <ScreenScan>
	Button_dothings();
 8002ce4:	f7ff f9b8 	bl	8002058 <Button_dothings>
	gui_menus[0].menu_handler();
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <GUI_Menu02_Scan+0x18>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4798      	blx	r3
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200051e0 	.word	0x200051e0

08002cf8 <GUI_Menu02_Create>:

void GUI_Menu02_Create(void(*menu_handler)(), uint8_t id){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]

	clearScreen(0x0000);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fe fc80 	bl	800160a <clearScreen>

	gui_menus_counter=0;
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <GUI_Menu02_Create+0x184>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
	buttons_counter=0;
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <GUI_Menu02_Create+0x188>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]

	drawSquare(60, 40, 65, 280, 0x07e0);
 8002d16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002d20:	2241      	movs	r2, #65	; 0x41
 8002d22:	2128      	movs	r1, #40	; 0x28
 8002d24:	203c      	movs	r0, #60	; 0x3c
 8002d26:	f7fe fd6b 	bl	8001800 <drawSquare>
	drawSquare(60, 40, 180, 45, 0x07e0);
 8002d2a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	232d      	movs	r3, #45	; 0x2d
 8002d32:	22b4      	movs	r2, #180	; 0xb4
 8002d34:	2128      	movs	r1, #40	; 0x28
 8002d36:	203c      	movs	r0, #60	; 0x3c
 8002d38:	f7fe fd62 	bl	8001800 <drawSquare>
	drawSquare(60, 40+60, 180, 45+60, 0x07e0);
 8002d3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2369      	movs	r3, #105	; 0x69
 8002d44:	22b4      	movs	r2, #180	; 0xb4
 8002d46:	2164      	movs	r1, #100	; 0x64
 8002d48:	203c      	movs	r0, #60	; 0x3c
 8002d4a:	f7fe fd59 	bl	8001800 <drawSquare>
	drawSquare(60, 40+60*2, 180, 45+60*2, 0x07e0);
 8002d4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	23a5      	movs	r3, #165	; 0xa5
 8002d56:	22b4      	movs	r2, #180	; 0xb4
 8002d58:	21a0      	movs	r1, #160	; 0xa0
 8002d5a:	203c      	movs	r0, #60	; 0x3c
 8002d5c:	f7fe fd50 	bl	8001800 <drawSquare>
	drawSquare(60, 40+60*3, 180, 45+60*3, 0x07e0);
 8002d60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	23e1      	movs	r3, #225	; 0xe1
 8002d68:	22b4      	movs	r2, #180	; 0xb4
 8002d6a:	21dc      	movs	r1, #220	; 0xdc
 8002d6c:	203c      	movs	r0, #60	; 0x3c
 8002d6e:	f7fe fd47 	bl	8001800 <drawSquare>

	switch(car_location){
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <GUI_Menu02_Create+0x18c>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d870      	bhi.n	8002e5c <GUI_Menu02_Create+0x164>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <GUI_Menu02_Create+0x88>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002e0d 	.word	0x08002e0d
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002e21 	.word	0x08002e21
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002e35 	.word	0x08002e35
 8002d98:	08002de5 	.word	0x08002de5
 8002d9c:	08002e49 	.word	0x08002e49
 8002da0:	08002df9 	.word	0x08002df9
	case 0:
		drawSquare(60-10, 280, 60+10, 300, 0xf800);
 8002da4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002dae:	2246      	movs	r2, #70	; 0x46
 8002db0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002db4:	2032      	movs	r0, #50	; 0x32
 8002db6:	f7fe fd23 	bl	8001800 <drawSquare>
		break;
 8002dba:	e04f      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 2:
		drawSquare(60-10, 280-60, 60+10, 300-60, 0xf800);
 8002dbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	23f0      	movs	r3, #240	; 0xf0
 8002dc4:	2246      	movs	r2, #70	; 0x46
 8002dc6:	21dc      	movs	r1, #220	; 0xdc
 8002dc8:	2032      	movs	r0, #50	; 0x32
 8002dca:	f7fe fd19 	bl	8001800 <drawSquare>
		break;
 8002dce:	e045      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 4:
		drawSquare(60-10, 280-60*2, 60+10, 300-60*2, 0xf800);
 8002dd0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	23b4      	movs	r3, #180	; 0xb4
 8002dd8:	2246      	movs	r2, #70	; 0x46
 8002dda:	21a0      	movs	r1, #160	; 0xa0
 8002ddc:	2032      	movs	r0, #50	; 0x32
 8002dde:	f7fe fd0f 	bl	8001800 <drawSquare>
		break;
 8002de2:	e03b      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 6:
		drawSquare(60-10, 280-60*3, 60+10, 300-60*3, 0xf800);
 8002de4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2378      	movs	r3, #120	; 0x78
 8002dec:	2246      	movs	r2, #70	; 0x46
 8002dee:	2164      	movs	r1, #100	; 0x64
 8002df0:	2032      	movs	r0, #50	; 0x32
 8002df2:	f7fe fd05 	bl	8001800 <drawSquare>
		break;
 8002df6:	e031      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 8:
		drawSquare(60-10, 280-60*4, 60+10, 300-60*4, 0xf800);
 8002df8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	233c      	movs	r3, #60	; 0x3c
 8002e00:	2246      	movs	r2, #70	; 0x46
 8002e02:	2128      	movs	r1, #40	; 0x28
 8002e04:	2032      	movs	r0, #50	; 0x32
 8002e06:	f7fe fcfb 	bl	8001800 <drawSquare>
		break;
 8002e0a:	e027      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 1:
		drawSquare(60+120, 280-60, 60+120+20, 300-60, 0xf800);
 8002e0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	23f0      	movs	r3, #240	; 0xf0
 8002e14:	22c8      	movs	r2, #200	; 0xc8
 8002e16:	21dc      	movs	r1, #220	; 0xdc
 8002e18:	20b4      	movs	r0, #180	; 0xb4
 8002e1a:	f7fe fcf1 	bl	8001800 <drawSquare>
		break;
 8002e1e:	e01d      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 3:
		drawSquare(60+120, 280-60*2, 60+120+20, 300-60*2, 0xf800);
 8002e20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	23b4      	movs	r3, #180	; 0xb4
 8002e28:	22c8      	movs	r2, #200	; 0xc8
 8002e2a:	21a0      	movs	r1, #160	; 0xa0
 8002e2c:	20b4      	movs	r0, #180	; 0xb4
 8002e2e:	f7fe fce7 	bl	8001800 <drawSquare>
		break;
 8002e32:	e013      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 5:
		drawSquare(60+120, 280-60*3, 60+120+20, 300-60*3, 0xf800);
 8002e34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2378      	movs	r3, #120	; 0x78
 8002e3c:	22c8      	movs	r2, #200	; 0xc8
 8002e3e:	2164      	movs	r1, #100	; 0x64
 8002e40:	20b4      	movs	r0, #180	; 0xb4
 8002e42:	f7fe fcdd 	bl	8001800 <drawSquare>
		break;
 8002e46:	e009      	b.n	8002e5c <GUI_Menu02_Create+0x164>
	case 7:
		drawSquare(60+120, 280-60*4, 60+120+20, 300-60*4, 0xf800);
 8002e48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	233c      	movs	r3, #60	; 0x3c
 8002e50:	22c8      	movs	r2, #200	; 0xc8
 8002e52:	2128      	movs	r1, #40	; 0x28
 8002e54:	20b4      	movs	r0, #180	; 0xb4
 8002e56:	f7fe fcd3 	bl	8001800 <drawSquare>
		break;
 8002e5a:	bf00      	nop
	}

	gui_menus[id].menu_handler=menu_handler;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <GUI_Menu02_Create+0x190>)
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	gui_menus_counter++;
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <GUI_Menu02_Create+0x184>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <GUI_Menu02_Create+0x184>)
 8002e70:	701a      	strb	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200009bd 	.word	0x200009bd
 8002e80:	200009bc 	.word	0x200009bc
 8002e84:	200009ce 	.word	0x200009ce
 8002e88:	200051e0 	.word	0x200051e0

08002e8c <Menu02_loop>:

void Menu02_loop(){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	if(menu_flag==2){
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <Menu02_loop+0x3c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d114      	bne.n	8002ec2 <Menu02_loop+0x36>

		GUI_Menu02_Create(Menu02_handler, 0);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	480c      	ldr	r0, [pc, #48]	; (8002ecc <Menu02_loop+0x40>)
 8002e9c:	f7ff ff2c 	bl	8002cf8 <GUI_Menu02_Create>

	while(menu_flag==2){
 8002ea0:	e00b      	b.n	8002eba <Menu02_loop+0x2e>

		car_location++;
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <Menu02_loop+0x44>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <Menu02_loop+0x44>)
 8002eac:	701a      	strb	r2, [r3, #0]

		GUI_Menu02_Create(Menu02_handler, 0);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4806      	ldr	r0, [pc, #24]	; (8002ecc <Menu02_loop+0x40>)
 8002eb2:	f7ff ff21 	bl	8002cf8 <GUI_Menu02_Create>

		GUI_Menu02_Scan();
 8002eb6:	f7ff ff11 	bl	8002cdc <GUI_Menu02_Scan>
	while(menu_flag==2){
 8002eba:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <Menu02_loop+0x3c>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d0ef      	beq.n	8002ea2 <Menu02_loop+0x16>
	}

	}
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200009c9 	.word	0x200009c9
 8002ecc:	08002c6d 	.word	0x08002c6d
 8002ed0:	200009ce 	.word	0x200009ce

08002ed4 <NRF24L01_Write_Reg>:
}
//SPI写寄存器
//reg:指定寄存器地址
//value:写入的值
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	460a      	mov	r2, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
   	NRF24L01_CSN=0;                 //使能SPI传输
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <NRF24L01_Write_Reg+0x44>)
 8002ee6:	7813      	ldrb	r3, [r2, #0]
 8002ee8:	f36f 13c7 	bfc	r3, #7, #1
 8002eec:	7013      	strb	r3, [r2, #0]
  	status =SPI2_ReadWriteByte(reg);//发送寄存器号
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f9f7 	bl	80032e4 <SPI2_ReadWriteByte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  	SPI2_ReadWriteByte(value);      //写入寄存器的值
 8002efa:	79bb      	ldrb	r3, [r7, #6]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f9f1 	bl	80032e4 <SPI2_ReadWriteByte>
  	NRF24L01_CSN=1;                 //禁止SPI传输
 8002f02:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <NRF24L01_Write_Reg+0x44>)
 8002f04:	7813      	ldrb	r3, [r2, #0]
 8002f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0a:	7013      	strb	r3, [r2, #0]
  	return(status);       			//返回状态值
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	4001200c 	.word	0x4001200c

08002f1c <NRF24L01_Read_Reg>:
//读取SPI寄存器值
//reg:要读的寄存器
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L01_CSN = 0;          //使能SPI传输
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <NRF24L01_Read_Reg+0x3c>)
 8002f28:	7813      	ldrb	r3, [r2, #0]
 8002f2a:	f36f 13c7 	bfc	r3, #7, #1
 8002f2e:	7013      	strb	r3, [r2, #0]
  	SPI2_ReadWriteByte(reg);   //发送寄存器号
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f9d6 	bl	80032e4 <SPI2_ReadWriteByte>
  	reg_val=SPI2_ReadWriteByte(0XFF);//读取寄存器内容
 8002f38:	20ff      	movs	r0, #255	; 0xff
 8002f3a:	f000 f9d3 	bl	80032e4 <SPI2_ReadWriteByte>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	73fb      	strb	r3, [r7, #15]
  	NRF24L01_CSN = 1;          //禁止SPI传输
 8002f42:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <NRF24L01_Read_Reg+0x3c>)
 8002f44:	7813      	ldrb	r3, [r2, #0]
 8002f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4a:	7013      	strb	r3, [r2, #0]
  	return(reg_val);           //返回状态值
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	4001200c 	.word	0x4001200c

08002f5c <NRF24L01_Write_Buf>:
//reg:寄存器(位置)
//*pBuf:数据指针
//len:数据长度
//返回值,此次读到的状态寄存器值
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	71bb      	strb	r3, [r7, #6]
	uint8_t status,u8_ctr;
 	NRF24L01_CSN = 0;          //使能SPI传输
 8002f6c:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <NRF24L01_Write_Buf+0x5c>)
 8002f6e:	7813      	ldrb	r3, [r2, #0]
 8002f70:	f36f 13c7 	bfc	r3, #7, #1
 8002f74:	7013      	strb	r3, [r2, #0]
  	status = SPI2_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f9b3 	bl	80032e4 <SPI2_ReadWriteByte>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	73bb      	strb	r3, [r7, #14]
  	for(u8_ctr=0; u8_ctr<len; u8_ctr++)SPI2_ReadWriteByte(*pBuf++); //写入数据
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e009      	b.n	8002f9c <NRF24L01_Write_Buf+0x40>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	603a      	str	r2, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f9a7 	bl	80032e4 <SPI2_ReadWriteByte>
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	79bb      	ldrb	r3, [r7, #6]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3f1      	bcc.n	8002f88 <NRF24L01_Write_Buf+0x2c>
  	NRF24L01_CSN = 1;       //关闭SPI传输
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <NRF24L01_Write_Buf+0x5c>)
 8002fa6:	7813      	ldrb	r3, [r2, #0]
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fac:	7013      	strb	r3, [r2, #0]
  	return status;          //返回读到的状态值
 8002fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	4001200c 	.word	0x4001200c

08002fbc <NRF24L01_TxPacket>:
//启动NRF24L01发送一次数据
//txbuf:待发送数据首地址
//返回值:发送完成状况
uint8_t NRF24L01_TxPacket(uint8_t *txbuf)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	uint8_t sta;
 	SPI2_SetSpeed(SPI_SPEED_8);//spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	f000 f967 	bl	8003298 <SPI2_SetSpeed>
	NRF24L01_CE=0;
 8002fca:	4a1c      	ldr	r2, [pc, #112]	; (800303c <NRF24L01_TxPacket+0x80>)
 8002fcc:	7853      	ldrb	r3, [r2, #1]
 8002fce:	f36f 0300 	bfc	r3, #0, #1
 8002fd2:	7053      	strb	r3, [r2, #1]
  	NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	20a0      	movs	r0, #160	; 0xa0
 8002fda:	f7ff ffbf 	bl	8002f5c <NRF24L01_Write_Buf>
 	NRF24L01_CE=1;//启动发送
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <NRF24L01_TxPacket+0x80>)
 8002fe0:	7853      	ldrb	r3, [r2, #1]
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	7053      	strb	r3, [r2, #1]
	while(NRF24L01_IRQ!=0);//等待发送完成
 8002fe8:	bf00      	nop
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <NRF24L01_TxPacket+0x84>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f8      	bne.n	8002fea <NRF24L01_TxPacket+0x2e>
	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8002ff8:	2007      	movs	r0, #7
 8002ffa:	f7ff ff8f 	bl	8002f1c <NRF24L01_Read_Reg>
 8002ffe:	4603      	mov	r3, r0
 8003000:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	4619      	mov	r1, r3
 8003006:	2027      	movs	r0, #39	; 0x27
 8003008:	f7ff ff64 	bl	8002ed4 <NRF24L01_Write_Reg>
	if(sta&MAX_TX)//达到最大重发次数
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <NRF24L01_TxPacket+0x66>
	{
		NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器
 8003016:	21ff      	movs	r1, #255	; 0xff
 8003018:	20e1      	movs	r0, #225	; 0xe1
 800301a:	f7ff ff5b 	bl	8002ed4 <NRF24L01_Write_Reg>
		return MAX_TX;
 800301e:	2310      	movs	r3, #16
 8003020:	e007      	b.n	8003032 <NRF24L01_TxPacket+0x76>
	}
	if(sta&TX_OK)//发送完成
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <NRF24L01_TxPacket+0x74>
	{
		return TX_OK;
 800302c:	2320      	movs	r3, #32
 800302e:	e000      	b.n	8003032 <NRF24L01_TxPacket+0x76>
	}
	return 0xff;//其他原因发送失败
 8003030:	23ff      	movs	r3, #255	; 0xff
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	4001200c 	.word	0x4001200c
 8003040:	40012008 	.word	0x40012008

08003044 <SDIO_Send_Cmd>:
//SDIO发送命令函数
//cmdindex:命令索引,低六位有效
//waitrsp:期待的相应.00/10,无响应;01,短响应;11,长响应
//arg:参数
void SDIO_Send_Cmd(uint8_t cmdindex,uint8_t waitrsp,uint32_t arg)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	603a      	str	r2, [r7, #0]
 800304e:	71fb      	strb	r3, [r7, #7]
 8003050:	460b      	mov	r3, r1
 8003052:	71bb      	strb	r3, [r7, #6]
	uint32_t tmpreg;
	SDIO->ARG=arg;
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <SDIO_Send_Cmd+0x58>)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6093      	str	r3, [r2, #8]
	tmpreg=SDIO->CMD;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <SDIO_Send_Cmd+0x58>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	60fb      	str	r3, [r7, #12]
	tmpreg&=0XFFFFF800;		//清除index和waitrsp
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003066:	f023 0307 	bic.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]
	tmpreg|=cmdindex&0X3F;	//设置新的index
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
	tmpreg|=waitrsp<<6;		//设置新的wait rsp
 8003078:	79bb      	ldrb	r3, [r7, #6]
 800307a:	019b      	lsls	r3, r3, #6
 800307c:	461a      	mov	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
	tmpreg|=0<<8;			//无等待
  	tmpreg|=1<<10;			//命令通道状态机使能
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	60fb      	str	r3, [r7, #12]
	SDIO->CMD=tmpreg;
 800308c:	4a03      	ldr	r2, [pc, #12]	; (800309c <SDIO_Send_Cmd+0x58>)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	60d3      	str	r3, [r2, #12]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	40018000 	.word	0x40018000

080030a0 <SDIO_IRQHandler>:
	}
	return errorstatus;
}
//SDIO中断服务函数
void SDIO_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
 	SD_ProcessIRQSrc();//处理所有SDIO相关中断
 80030a4:	f000 f802 	bl	80030ac <SD_ProcessIRQSrc>
}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}

080030ac <SD_ProcessIRQSrc>:
//SDIO中断处理函数
//处理SDIO传输过程中的各种中断事务
//返回值:错误代码
SD_Error SD_ProcessIRQSrc(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
	if(SDIO->STA&(1<<8))//接收完成中断
 80030b0:	4b57      	ldr	r3, [pc, #348]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80030b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d028      	beq.n	800310e <SD_ProcessIRQSrc+0x62>
	{
		if (StopCondition==1)
 80030bc:	4b55      	ldr	r3, [pc, #340]	; (8003214 <SD_ProcessIRQSrc+0x168>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <SD_ProcessIRQSrc+0x32>
		{
			SDIO_Send_Cmd(SD_CMD_STOP_TRANSMISSION,1,0);		//发送CMD12,结束传输
 80030c4:	2200      	movs	r2, #0
 80030c6:	2101      	movs	r1, #1
 80030c8:	200c      	movs	r0, #12
 80030ca:	f7ff ffbb 	bl	8003044 <SDIO_Send_Cmd>
			TransferError=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
 80030ce:	200c      	movs	r0, #12
 80030d0:	f000 f8a6 	bl	8003220 <CmdResp1Error>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e002      	b.n	80030e4 <SD_ProcessIRQSrc+0x38>
		}else TransferError = SD_OK;
 80030de:	4b4e      	ldr	r3, [pc, #312]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
 		SDIO->ICR|=1<<8;//清除完成中断标记
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	4a49      	ldr	r2, [pc, #292]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ee:	6393      	str	r3, [r2, #56]	; 0x38
		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
 80030f0:	4b47      	ldr	r3, [pc, #284]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	4a46      	ldr	r2, [pc, #280]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80030f6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80030fa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80030fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 		TransferEnd = 1;
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <SD_ProcessIRQSrc+0x170>)
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
		return(TransferError);
 8003106:	4b44      	ldr	r3, [pc, #272]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e07d      	b.n	800320a <SD_ProcessIRQSrc+0x15e>
	}
 	if(SDIO->STA&(1<<1))//数据CRC错误
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d012      	beq.n	8003140 <SD_ProcessIRQSrc+0x94>
	{
		SDIO->ICR|=1<<1;//清除中断标记
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4a3c      	ldr	r2, [pc, #240]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6393      	str	r3, [r2, #56]	; 0x38
		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
 8003126:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	4a39      	ldr	r2, [pc, #228]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 800312c:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003130:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003134:	63d3      	str	r3, [r2, #60]	; 0x3c
	    TransferError = SD_DATA_CRC_FAIL;
 8003136:	4b38      	ldr	r3, [pc, #224]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 8003138:	2202      	movs	r2, #2
 800313a:	701a      	strb	r2, [r3, #0]
	    return(SD_DATA_CRC_FAIL);
 800313c:	2302      	movs	r3, #2
 800313e:	e064      	b.n	800320a <SD_ProcessIRQSrc+0x15e>
	}
 	if(SDIO->STA&(1<<3))//数据超时错误
 8003140:	4b33      	ldr	r3, [pc, #204]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d012      	beq.n	8003172 <SD_ProcessIRQSrc+0xc6>
	{
		SDIO->ICR|=1<<3;//清除中断标记
 800314c:	4b30      	ldr	r3, [pc, #192]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	4a2f      	ldr	r2, [pc, #188]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003152:	f043 0308 	orr.w	r3, r3, #8
 8003156:	6393      	str	r3, [r2, #56]	; 0x38
		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
 8003158:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 800315e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003162:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003166:	63d3      	str	r3, [r2, #60]	; 0x3c
	    TransferError = SD_DATA_TIMEOUT;
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 800316a:	2204      	movs	r2, #4
 800316c:	701a      	strb	r2, [r3, #0]
	    return(SD_DATA_TIMEOUT);
 800316e:	2304      	movs	r3, #4
 8003170:	e04b      	b.n	800320a <SD_ProcessIRQSrc+0x15e>
	}
  	if(SDIO->STA&(1<<5))//FIFO上溢错误
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <SD_ProcessIRQSrc+0xf8>
	{
		SDIO->ICR|=1<<5;//清除中断标记
 800317e:	4b24      	ldr	r3, [pc, #144]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	4a23      	ldr	r2, [pc, #140]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003184:	f043 0320 	orr.w	r3, r3, #32
 8003188:	6393      	str	r3, [r2, #56]	; 0x38
		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	4a20      	ldr	r2, [pc, #128]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 8003190:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003194:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003198:	63d3      	str	r3, [r2, #60]	; 0x3c
	    TransferError = SD_RX_OVERRUN;
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 800319c:	2206      	movs	r2, #6
 800319e:	701a      	strb	r2, [r3, #0]
	    return(SD_RX_OVERRUN);
 80031a0:	2306      	movs	r3, #6
 80031a2:	e032      	b.n	800320a <SD_ProcessIRQSrc+0x15e>
	}
   	if(SDIO->STA&(1<<4))//FIFO下溢错误
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <SD_ProcessIRQSrc+0x12a>
	{
		SDIO->ICR|=1<<4;//清除中断标记
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	4a16      	ldr	r2, [pc, #88]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031b6:	f043 0310 	orr.w	r3, r3, #16
 80031ba:	6393      	str	r3, [r2, #56]	; 0x38
		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	4a13      	ldr	r2, [pc, #76]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031c2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80031c6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80031ca:	63d3      	str	r3, [r2, #60]	; 0x3c
	    TransferError = SD_TX_UNDERRUN;
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 80031ce:	2205      	movs	r2, #5
 80031d0:	701a      	strb	r2, [r3, #0]
	    return(SD_TX_UNDERRUN);
 80031d2:	2305      	movs	r3, #5
 80031d4:	e019      	b.n	800320a <SD_ProcessIRQSrc+0x15e>
	}
	if(SDIO->STA&(1<<9))//起始位错误
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d012      	beq.n	8003208 <SD_ProcessIRQSrc+0x15c>
	{
		SDIO->ICR|=1<<9;//清除中断标记
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ec:	6393      	str	r3, [r2, #56]	; 0x38
		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <SD_ProcessIRQSrc+0x164>)
 80031f4:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80031f8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80031fc:	63d3      	str	r3, [r2, #60]	; 0x3c
	    TransferError = SD_START_BIT_ERR;
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <SD_ProcessIRQSrc+0x16c>)
 8003200:	2207      	movs	r2, #7
 8003202:	701a      	strb	r2, [r3, #0]
	    return(SD_START_BIT_ERR);
 8003204:	2307      	movs	r3, #7
 8003206:	e000      	b.n	800320a <SD_ProcessIRQSrc+0x15e>
	}
	return(SD_OK);
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40018000 	.word	0x40018000
 8003214:	200009cf 	.word	0x200009cf
 8003218:	200009d0 	.word	0x200009d0
 800321c:	200009d1 	.word	0x200009d1

08003220 <CmdResp1Error>:
}
//检查R1响应的错误状态
//cmd:当前命令
//返回值:sd卡错误码
SD_Error CmdResp1Error(uint8_t cmd)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
   	uint32_t status;
	while(1)
	{
		status=SDIO->STA;
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <CmdResp1Error+0x74>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	60fb      	str	r3, [r7, #12]
		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003236:	2b00      	cmp	r3, #0
 8003238:	d100      	bne.n	800323c <CmdResp1Error+0x1c>
		status=SDIO->STA;
 800323a:	e7f6      	b.n	800322a <CmdResp1Error+0xa>
		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)
 800323c:	bf00      	nop
	}
	if(status&(1<<2))					//响应超时
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <CmdResp1Error+0x32>
	{
 		SDIO->ICR=1<<2;					//清除命令响应超时标志
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <CmdResp1Error+0x74>)
 800324a:	2204      	movs	r2, #4
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
		return SD_CMD_RSP_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e01a      	b.n	8003288 <CmdResp1Error+0x68>
	}
 	if(status&(1<<0))					//CRC错误
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <CmdResp1Error+0x46>
	{
 		SDIO->ICR=1<<0;					//清除标志
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <CmdResp1Error+0x74>)
 800325e:	2201      	movs	r2, #1
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
		return SD_CMD_CRC_FAIL;
 8003262:	2301      	movs	r3, #1
 8003264:	e010      	b.n	8003288 <CmdResp1Error+0x68>
	}
	if(SDIO->RESPCMD!=cmd)return SD_ILLEGAL_CMD;//命令不匹配
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <CmdResp1Error+0x74>)
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <CmdResp1Error+0x54>
 8003270:	2310      	movs	r3, #16
 8003272:	e009      	b.n	8003288 <CmdResp1Error+0x68>
  	SDIO->ICR=0X5FF;	 				//清除标记
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <CmdResp1Error+0x74>)
 8003276:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
	return (SD_Error)(SDIO->RESP1&SD_OCR_ERRORBITS);//返回卡响应
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <CmdResp1Error+0x74>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	b2db      	uxtb	r3, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40018000 	.word	0x40018000

08003298 <SPI2_SetSpeed>:
//SPI2速度设置函数
//SpeedSet:0~7
//SPI速度=fAPB1/2^(SpeedSet+1)
//APB1时钟一般为36Mhz
void SPI2_SetSpeed(uint8_t SpeedSet)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
	SpeedSet&=0X07;			//限制范围
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	71fb      	strb	r3, [r7, #7]
	SPI2->CR1&=0XFFC7;
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <SPI2_SetSpeed+0x48>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	490c      	ldr	r1, [pc, #48]	; (80032e0 <SPI2_SetSpeed+0x48>)
 80032b0:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80032b4:	4013      	ands	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]
	SPI2->CR1|=SpeedSet<<3;	//设置SPI2速度
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <SPI2_SetSpeed+0x48>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	79fa      	ldrb	r2, [r7, #7]
 80032be:	00d2      	lsls	r2, r2, #3
 80032c0:	4611      	mov	r1, r2
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <SPI2_SetSpeed+0x48>)
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6013      	str	r3, [r2, #0]
	SPI2->CR1|=1<<6; 		//SPI设备使能
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <SPI2_SetSpeed+0x48>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <SPI2_SetSpeed+0x48>)
 80032ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40003800 	.word	0x40003800

080032e4 <SPI2_ReadWriteByte>:
//SPI2 读写一个字节
//TxData:要写入的字节
//返回值:读取到的字节
uint8_t SPI2_ReadWriteByte(uint8_t TxData)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
	uint16_t retry=0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	81fb      	strh	r3, [r7, #14]
	while((SPI2->SR&1<<1)==0)		//等待发送区空
 80032f2:	e009      	b.n	8003308 <SPI2_ReadWriteByte+0x24>
	{
		retry++;
 80032f4:	89fb      	ldrh	r3, [r7, #14]
 80032f6:	3301      	adds	r3, #1
 80032f8:	81fb      	strh	r3, [r7, #14]
		if(retry>=0XFFFE)return 0; 	//超时退出
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <SPI2_ReadWriteByte+0x24>
 8003304:	2300      	movs	r3, #0
 8003306:	e01e      	b.n	8003346 <SPI2_ReadWriteByte+0x62>
	while((SPI2->SR&1<<1)==0)		//等待发送区空
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <SPI2_ReadWriteByte+0x6c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ef      	beq.n	80032f4 <SPI2_ReadWriteByte+0x10>
	}
	SPI2->DR=TxData;	 	  		//发送一个byte
 8003314:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <SPI2_ReadWriteByte+0x6c>)
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	60d3      	str	r3, [r2, #12]
	retry=0;
 800331a:	2300      	movs	r3, #0
 800331c:	81fb      	strh	r3, [r7, #14]
	while((SPI2->SR&1<<0)==0) 		//等待接收完一个byte
 800331e:	e009      	b.n	8003334 <SPI2_ReadWriteByte+0x50>
	{
		retry++;
 8003320:	89fb      	ldrh	r3, [r7, #14]
 8003322:	3301      	adds	r3, #1
 8003324:	81fb      	strh	r3, [r7, #14]
		if(retry>=0XFFFE)return 0;	//超时退出
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <SPI2_ReadWriteByte+0x50>
 8003330:	2300      	movs	r3, #0
 8003332:	e008      	b.n	8003346 <SPI2_ReadWriteByte+0x62>
	while((SPI2->SR&1<<0)==0) 		//等待接收完一个byte
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <SPI2_ReadWriteByte+0x6c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ef      	beq.n	8003320 <SPI2_ReadWriteByte+0x3c>
	}
	return SPI2->DR;          		//返回收到的数据
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <SPI2_ReadWriteByte+0x6c>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	b2db      	uxtb	r3, r3
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40003800 	.word	0x40003800

08003354 <TOUCH_GPIO_Init>:
uint16_t touch_y=0;

uint16_t touch_onLCD_x=0;
uint16_t touch_onLCD_y=0;

void TOUCH_GPIO_Init(){
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <TOUCH_GPIO_Init+0xb0>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <TOUCH_GPIO_Init+0xb0>)
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	6193      	str	r3, [r2, #24]
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <TOUCH_GPIO_Init+0xb0>)
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <TOUCH_GPIO_Init+0xb0>)
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <TOUCH_GPIO_Init+0xb0>)
 8003378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337c:	6193      	str	r3, [r2, #24]
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <TOUCH_GPIO_Init+0xb0>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	683b      	ldr	r3, [r7, #0]

	((GPIO_CONFIG_S*)(&(GPIOB->CRL)))->GPIO2 = 0b1000;	//DOUT(MISO)
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <TOUCH_GPIO_Init+0xb4>)
 800338c:	7853      	ldrb	r3, [r2, #1]
 800338e:	2108      	movs	r1, #8
 8003390:	f361 0303 	bfi	r3, r1, #0, #4
 8003394:	7053      	strb	r3, [r2, #1]
	(((GPIO_S*)(&(GPIOB->ODR)))->BIT2) = 1;				//PULL UP
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <TOUCH_GPIO_Init+0xb8>)
 8003398:	7813      	ldrb	r3, [r2, #0]
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	7013      	strb	r3, [r2, #0]

	((GPIO_CONFIG_S*)(&(GPIOB->CRL)))->GPIO1 = 0b0001;	//TCLK
 80033a0:	4a19      	ldr	r2, [pc, #100]	; (8003408 <TOUCH_GPIO_Init+0xb4>)
 80033a2:	7813      	ldrb	r3, [r2, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	f361 1307 	bfi	r3, r1, #4, #4
 80033aa:	7013      	strb	r3, [r2, #0]
	(((GPIO_S*)(&(GPIOB->ODR)))->BIT2) = 0;				//
 80033ac:	4a17      	ldr	r2, [pc, #92]	; (800340c <TOUCH_GPIO_Init+0xb8>)
 80033ae:	7813      	ldrb	r3, [r2, #0]
 80033b0:	f36f 0382 	bfc	r3, #2, #1
 80033b4:	7013      	strb	r3, [r2, #0]

	((GPIO_CONFIG_S*)(&(GPIOF->CRH)))->GPIO2 = 0b1000;	//TPEN 10-8=2
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <TOUCH_GPIO_Init+0xbc>)
 80033b8:	7853      	ldrb	r3, [r2, #1]
 80033ba:	2108      	movs	r1, #8
 80033bc:	f361 0303 	bfi	r3, r1, #0, #4
 80033c0:	7053      	strb	r3, [r2, #1]
	(((GPIO_S*)(&(GPIOB->ODR)))->BIT10) = 1;				//PULL UP
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <TOUCH_GPIO_Init+0xb8>)
 80033c4:	7853      	ldrb	r3, [r2, #1]
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	7053      	strb	r3, [r2, #1]

	((GPIO_CONFIG_S*)(&(GPIOF->CRH)))->GPIO3 = 0b0001;	//TCS 11-8=3
 80033cc:	4a10      	ldr	r2, [pc, #64]	; (8003410 <TOUCH_GPIO_Init+0xbc>)
 80033ce:	7853      	ldrb	r3, [r2, #1]
 80033d0:	2101      	movs	r1, #1
 80033d2:	f361 1307 	bfi	r3, r1, #4, #4
 80033d6:	7053      	strb	r3, [r2, #1]
	(((GPIO_S*)(&(GPIOB->ODR)))->BIT11) = 0;				//
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <TOUCH_GPIO_Init+0xb8>)
 80033da:	7853      	ldrb	r3, [r2, #1]
 80033dc:	f36f 03c3 	bfc	r3, #3, #1
 80033e0:	7053      	strb	r3, [r2, #1]

	((GPIO_CONFIG_S*)(&(GPIOF->CRH)))->GPIO1 = 0b0001;	//TDIN 9-8=1
 80033e2:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <TOUCH_GPIO_Init+0xbc>)
 80033e4:	7813      	ldrb	r3, [r2, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	f361 1307 	bfi	r3, r1, #4, #4
 80033ec:	7013      	strb	r3, [r2, #0]
	(((GPIO_S*)(&(GPIOB->ODR)))->BIT9) = 0;				//
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <TOUCH_GPIO_Init+0xb8>)
 80033f0:	7853      	ldrb	r3, [r2, #1]
 80033f2:	f36f 0341 	bfc	r3, #1, #1
 80033f6:	7053      	strb	r3, [r2, #1]

}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40010c00 	.word	0x40010c00
 800340c:	40010c0c 	.word	0x40010c0c
 8003410:	40011c04 	.word	0x40011c04

08003414 <TP_Write_Byte>:

//SPI写数据
//向触摸屏IC写入1byte数据
//num:要写入的数据
void TP_Write_Byte(uint8_t num)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	e021      	b.n	800346c <TP_Write_Byte+0x58>
	{
		if(num&0x80)TDIN=1;
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da05      	bge.n	800343c <TP_Write_Byte+0x28>
 8003430:	4a12      	ldr	r2, [pc, #72]	; (800347c <TP_Write_Byte+0x68>)
 8003432:	7853      	ldrb	r3, [r2, #1]
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	7053      	strb	r3, [r2, #1]
 800343a:	e004      	b.n	8003446 <TP_Write_Byte+0x32>
		else TDIN=0;
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <TP_Write_Byte+0x68>)
 800343e:	7853      	ldrb	r3, [r2, #1]
 8003440:	f36f 0341 	bfc	r3, #1, #1
 8003444:	7053      	strb	r3, [r2, #1]
		num<<=1;
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	71fb      	strb	r3, [r7, #7]
		TCLK=0;
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <TP_Write_Byte+0x6c>)
 800344e:	7813      	ldrb	r3, [r2, #0]
 8003450:	f36f 0341 	bfc	r3, #1, #1
 8003454:	7013      	strb	r3, [r2, #0]
		delay_us(1);
 8003456:	2001      	movs	r0, #1
 8003458:	f7fd ff14 	bl	8001284 <delay_us>
		TCLK=1;		//上升沿有效
 800345c:	4a08      	ldr	r2, [pc, #32]	; (8003480 <TP_Write_Byte+0x6c>)
 800345e:	7813      	ldrb	r3, [r2, #0]
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	7013      	strb	r3, [r2, #0]
	for(count=0;count<8;count++)
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	3301      	adds	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b07      	cmp	r3, #7
 8003470:	d9da      	bls.n	8003428 <TP_Write_Byte+0x14>
	}
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40011c0c 	.word	0x40011c0c
 8003480:	40010c0c 	.word	0x40010c0c

08003484 <TP_Read_AD>:
//SPI读数据
//从触摸屏IC读取adc值
//CMD:指令
//返回值:读到的数据
uint16_t TP_Read_AD(uint8_t CMD)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8003492:	2300      	movs	r3, #0
 8003494:	81bb      	strh	r3, [r7, #12]
	TCLK=0;		//先拉低时钟
 8003496:	4a2d      	ldr	r2, [pc, #180]	; (800354c <TP_Read_AD+0xc8>)
 8003498:	7813      	ldrb	r3, [r2, #0]
 800349a:	f36f 0341 	bfc	r3, #1, #1
 800349e:	7013      	strb	r3, [r2, #0]
	TDIN=0; 	//拉低数据线
 80034a0:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <TP_Read_AD+0xcc>)
 80034a2:	7853      	ldrb	r3, [r2, #1]
 80034a4:	f36f 0341 	bfc	r3, #1, #1
 80034a8:	7053      	strb	r3, [r2, #1]
	TCS=0; 		//选中触摸屏IC
 80034aa:	4a29      	ldr	r2, [pc, #164]	; (8003550 <TP_Read_AD+0xcc>)
 80034ac:	7853      	ldrb	r3, [r2, #1]
 80034ae:	f36f 03c3 	bfc	r3, #3, #1
 80034b2:	7053      	strb	r3, [r2, #1]
	TP_Write_Byte(CMD);//发送命令字
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ffac 	bl	8003414 <TP_Write_Byte>
	delay_us(6);//ADS7846的转换时间最长为6us
 80034bc:	2006      	movs	r0, #6
 80034be:	f7fd fee1 	bl	8001284 <delay_us>
	TCLK=0;
 80034c2:	4a22      	ldr	r2, [pc, #136]	; (800354c <TP_Read_AD+0xc8>)
 80034c4:	7813      	ldrb	r3, [r2, #0]
 80034c6:	f36f 0341 	bfc	r3, #1, #1
 80034ca:	7013      	strb	r3, [r2, #0]
	delay_us(1);
 80034cc:	2001      	movs	r0, #1
 80034ce:	f7fd fed9 	bl	8001284 <delay_us>
	TCLK=1;		//给1个时钟，清除BUSY
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <TP_Read_AD+0xc8>)
 80034d4:	7813      	ldrb	r3, [r2, #0]
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	7013      	strb	r3, [r2, #0]
	delay_us(1);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fd fed1 	bl	8001284 <delay_us>
	TCLK=0;
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <TP_Read_AD+0xc8>)
 80034e4:	7813      	ldrb	r3, [r2, #0]
 80034e6:	f36f 0341 	bfc	r3, #1, #1
 80034ea:	7013      	strb	r3, [r2, #0]
	for(count=0;count<16;count++)//读出16位数据,只有高12位有效
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e01c      	b.n	800352c <TP_Read_AD+0xa8>
	{
		Num<<=1;
 80034f2:	89bb      	ldrh	r3, [r7, #12]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	81bb      	strh	r3, [r7, #12]
		TCLK=0;	//下降沿有效
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <TP_Read_AD+0xc8>)
 80034fa:	7813      	ldrb	r3, [r2, #0]
 80034fc:	f36f 0341 	bfc	r3, #1, #1
 8003500:	7013      	strb	r3, [r2, #0]
		delay_us(1);
 8003502:	2001      	movs	r0, #1
 8003504:	f7fd febe 	bl	8001284 <delay_us>
 		TCLK=1;
 8003508:	4a10      	ldr	r2, [pc, #64]	; (800354c <TP_Read_AD+0xc8>)
 800350a:	7813      	ldrb	r3, [r2, #0]
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	7013      	strb	r3, [r2, #0]
 		if(DOUT)Num++;
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <TP_Read_AD+0xd0>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <TP_Read_AD+0xa2>
 8003520:	89bb      	ldrh	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)//读出16位数据,只有高12位有效
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	3301      	adds	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d9df      	bls.n	80034f2 <TP_Read_AD+0x6e>
	}
	Num>>=4;   	//只有高12位有效.
 8003532:	89bb      	ldrh	r3, [r7, #12]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	81bb      	strh	r3, [r7, #12]
	TCS=1;		//释放片选
 8003538:	4a05      	ldr	r2, [pc, #20]	; (8003550 <TP_Read_AD+0xcc>)
 800353a:	7853      	ldrb	r3, [r2, #1]
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	7053      	strb	r3, [r2, #1]
	return(Num);
 8003542:	89bb      	ldrh	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40010c0c 	.word	0x40010c0c
 8003550:	40011c0c 	.word	0x40011c0c
 8003554:	40010c08 	.word	0x40010c08

08003558 <TP_Read_XOY>:
//xy:指令（CMD_RDX/CMD_RDY）
//返回值:读到的数据
#define READ_TIMES 5 	//读取次数
#define LOST_VAL 1	  	//丢弃值
uint16_t TP_Read_XOY(uint8_t xy)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8003562:	2300      	movs	r3, #0
 8003564:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8003566:	2300      	movs	r3, #0
 8003568:	83fb      	strh	r3, [r7, #30]
 800356a:	e00f      	b.n	800358c <TP_Read_XOY+0x34>
 800356c:	8bfc      	ldrh	r4, [r7, #30]
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff87 	bl	8003484 <TP_Read_AD>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	0063      	lsls	r3, r4, #1
 800357c:	f107 0120 	add.w	r1, r7, #32
 8003580:	440b      	add	r3, r1
 8003582:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003586:	8bfb      	ldrh	r3, [r7, #30]
 8003588:	3301      	adds	r3, #1
 800358a:	83fb      	strh	r3, [r7, #30]
 800358c:	8bfb      	ldrh	r3, [r7, #30]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d9ec      	bls.n	800356c <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)//排序
 8003592:	2300      	movs	r3, #0
 8003594:	83fb      	strh	r3, [r7, #30]
 8003596:	e03b      	b.n	8003610 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8003598:	8bfb      	ldrh	r3, [r7, #30]
 800359a:	3301      	adds	r3, #1
 800359c:	83bb      	strh	r3, [r7, #28]
 800359e:	e031      	b.n	8003604 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])//升序排列
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	f107 0220 	add.w	r2, r7, #32
 80035a8:	4413      	add	r3, r2
 80035aa:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80035ae:	8bbb      	ldrh	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	f107 0120 	add.w	r1, r7, #32
 80035b6:	440b      	add	r3, r1
 80035b8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d91e      	bls.n	80035fe <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 80035c0:	8bfb      	ldrh	r3, [r7, #30]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	f107 0220 	add.w	r2, r7, #32
 80035c8:	4413      	add	r3, r2
 80035ca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80035ce:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80035d0:	8bbb      	ldrh	r3, [r7, #28]
 80035d2:	8bfa      	ldrh	r2, [r7, #30]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	f107 0120 	add.w	r1, r7, #32
 80035da:	440b      	add	r3, r1
 80035dc:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80035e0:	0053      	lsls	r3, r2, #1
 80035e2:	f107 0220 	add.w	r2, r7, #32
 80035e6:	4413      	add	r3, r2
 80035e8:	460a      	mov	r2, r1
 80035ea:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 80035ee:	8bbb      	ldrh	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	f107 0220 	add.w	r2, r7, #32
 80035f6:	4413      	add	r3, r2
 80035f8:	8b3a      	ldrh	r2, [r7, #24]
 80035fa:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 80035fe:	8bbb      	ldrh	r3, [r7, #28]
 8003600:	3301      	adds	r3, #1
 8003602:	83bb      	strh	r3, [r7, #28]
 8003604:	8bbb      	ldrh	r3, [r7, #28]
 8003606:	2b04      	cmp	r3, #4
 8003608:	d9ca      	bls.n	80035a0 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)//排序
 800360a:	8bfb      	ldrh	r3, [r7, #30]
 800360c:	3301      	adds	r3, #1
 800360e:	83fb      	strh	r3, [r7, #30]
 8003610:	8bfb      	ldrh	r3, [r7, #30]
 8003612:	2b03      	cmp	r3, #3
 8003614:	d9c0      	bls.n	8003598 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8003616:	2300      	movs	r3, #0
 8003618:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800361a:	2301      	movs	r3, #1
 800361c:	83fb      	strh	r3, [r7, #30]
 800361e:	e00c      	b.n	800363a <TP_Read_XOY+0xe2>
 8003620:	8bfb      	ldrh	r3, [r7, #30]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	f107 0220 	add.w	r2, r7, #32
 8003628:	4413      	add	r3, r2
 800362a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800362e:	8b7b      	ldrh	r3, [r7, #26]
 8003630:	4413      	add	r3, r2
 8003632:	837b      	strh	r3, [r7, #26]
 8003634:	8bfb      	ldrh	r3, [r7, #30]
 8003636:	3301      	adds	r3, #1
 8003638:	83fb      	strh	r3, [r7, #30]
 800363a:	8bfb      	ldrh	r3, [r7, #30]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d9ef      	bls.n	8003620 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8003640:	8b7b      	ldrh	r3, [r7, #26]
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <TP_Read_XOY+0x100>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	833b      	strh	r3, [r7, #24]
	return temp;
 800364c:	8b3b      	ldrh	r3, [r7, #24]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	bf00      	nop
 8003658:	aaaaaaab 	.word	0xaaaaaaab

0800365c <TP_Read_XY>:
//读取x,y坐标
//最小值不能少于100.
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8003666:	20d0      	movs	r0, #208	; 0xd0
 8003668:	f7ff ff76 	bl	8003558 <TP_Read_XOY>
 800366c:	4603      	mov	r3, r0
 800366e:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8003670:	2090      	movs	r0, #144	; 0x90
 8003672:	f7ff ff71 	bl	8003558 <TP_Read_XOY>
 8003676:	4603      	mov	r3, r0
 8003678:	81bb      	strh	r3, [r7, #12]
	//if(xtemp<100||ytemp<100)return 0;//读数失败
	*x=xtemp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	89fa      	ldrh	r2, [r7, #14]
 800367e:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	89ba      	ldrh	r2, [r7, #12]
 8003684:	801a      	strh	r2, [r3, #0]
	return 1;//读数成功
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <TP_Read_XY2>:
//该函数能大大提高准确度
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
#define ERR_RANGE 50 //误差范围
uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
    flag=TP_Read_XY(&x1,&y1);
 800369a:	f107 0212 	add.w	r2, r7, #18
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ffd9 	bl	800365c <TP_Read_XY>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]
    if(flag==0)return(0);
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <TP_Read_XY2+0x28>
 80036b4:	2300      	movs	r3, #0
 80036b6:	e04d      	b.n	8003754 <TP_Read_XY2+0xc4>
    flag=TP_Read_XY(&x2,&y2);
 80036b8:	f107 020e 	add.w	r2, r7, #14
 80036bc:	f107 0310 	add.w	r3, r7, #16
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ffca 	bl	800365c <TP_Read_XY>
 80036c8:	4603      	mov	r3, r0
 80036ca:	75fb      	strb	r3, [r7, #23]
    if(flag==0)return(0);
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <TP_Read_XY2+0x46>
 80036d2:	2300      	movs	r3, #0
 80036d4:	e03e      	b.n	8003754 <TP_Read_XY2+0xc4>
    if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 80036d6:	8a3a      	ldrh	r2, [r7, #16]
 80036d8:	8abb      	ldrh	r3, [r7, #20]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d805      	bhi.n	80036ea <TP_Read_XY2+0x5a>
 80036de:	8abb      	ldrh	r3, [r7, #20]
 80036e0:	461a      	mov	r2, r3
 80036e2:	8a3b      	ldrh	r3, [r7, #16]
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	429a      	cmp	r2, r3
 80036e8:	db09      	blt.n	80036fe <TP_Read_XY2+0x6e>
 80036ea:	8aba      	ldrh	r2, [r7, #20]
 80036ec:	8a3b      	ldrh	r3, [r7, #16]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d82f      	bhi.n	8003752 <TP_Read_XY2+0xc2>
 80036f2:	8a3b      	ldrh	r3, [r7, #16]
 80036f4:	461a      	mov	r2, r3
 80036f6:	8abb      	ldrh	r3, [r7, #20]
 80036f8:	3332      	adds	r3, #50	; 0x32
 80036fa:	429a      	cmp	r2, r3
 80036fc:	da29      	bge.n	8003752 <TP_Read_XY2+0xc2>
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 80036fe:	89fa      	ldrh	r2, [r7, #14]
 8003700:	8a7b      	ldrh	r3, [r7, #18]
 8003702:	429a      	cmp	r2, r3
 8003704:	d805      	bhi.n	8003712 <TP_Read_XY2+0x82>
 8003706:	8a7b      	ldrh	r3, [r7, #18]
 8003708:	461a      	mov	r2, r3
 800370a:	89fb      	ldrh	r3, [r7, #14]
 800370c:	3332      	adds	r3, #50	; 0x32
 800370e:	429a      	cmp	r2, r3
 8003710:	db09      	blt.n	8003726 <TP_Read_XY2+0x96>
 8003712:	8a7a      	ldrh	r2, [r7, #18]
 8003714:	89fb      	ldrh	r3, [r7, #14]
 8003716:	429a      	cmp	r2, r3
 8003718:	d81b      	bhi.n	8003752 <TP_Read_XY2+0xc2>
 800371a:	89fb      	ldrh	r3, [r7, #14]
 800371c:	461a      	mov	r2, r3
 800371e:	8a7b      	ldrh	r3, [r7, #18]
 8003720:	3332      	adds	r3, #50	; 0x32
 8003722:	429a      	cmp	r2, r3
 8003724:	da15      	bge.n	8003752 <TP_Read_XY2+0xc2>
    {
        *x=(x1+x2)/2;
 8003726:	8abb      	ldrh	r3, [r7, #20]
 8003728:	461a      	mov	r2, r3
 800372a:	8a3b      	ldrh	r3, [r7, #16]
 800372c:	4413      	add	r3, r2
 800372e:	0fda      	lsrs	r2, r3, #31
 8003730:	4413      	add	r3, r2
 8003732:	105b      	asrs	r3, r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	801a      	strh	r2, [r3, #0]
        *y=(y1+y2)/2;
 800373a:	8a7b      	ldrh	r3, [r7, #18]
 800373c:	461a      	mov	r2, r3
 800373e:	89fb      	ldrh	r3, [r7, #14]
 8003740:	4413      	add	r3, r2
 8003742:	0fda      	lsrs	r2, r3, #31
 8003744:	4413      	add	r3, r2
 8003746:	105b      	asrs	r3, r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	801a      	strh	r2, [r3, #0]
        return 1;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <TP_Read_XY2+0xc4>
    }else return 0;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	0000      	movs	r0, r0
	...

08003760 <get_Pen_XY>:

uint8_t get_Pen_XY(uint16_t *touch_onLCD_x, uint16_t *touch_onLCD_y){
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	uint16_t touch_x, touch_y;

	if(!TPEN){
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <get_Pen_XY+0x98>)
 800376c:	785b      	ldrb	r3, [r3, #1]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d131      	bne.n	80037dc <get_Pen_XY+0x7c>
		TP_Read_XY2(&touch_x,&touch_y);
 8003778:	f107 020c 	add.w	r2, r7, #12
 800377c:	f107 030e 	add.w	r3, r7, #14
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff84 	bl	8003690 <TP_Read_XY2>
		*touch_onLCD_x=(touch_x-200)*(240.0/3700);
 8003788:	89fb      	ldrh	r3, [r7, #14]
 800378a:	3bc8      	subs	r3, #200	; 0xc8
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc fe9d 	bl	80004cc <__aeabi_i2d>
 8003792:	a315      	add	r3, pc, #84	; (adr r3, 80037e8 <get_Pen_XY+0x88>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f7fc ff02 	bl	80005a0 <__aeabi_dmul>
 800379c:	4603      	mov	r3, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	4618      	mov	r0, r3
 80037a2:	4621      	mov	r1, r4
 80037a4:	f7fd f90e 	bl	80009c4 <__aeabi_d2uiz>
 80037a8:	4603      	mov	r3, r0
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	801a      	strh	r2, [r3, #0]
		*touch_onLCD_y=(touch_y-200)*(320.0/3700);
 80037b0:	89bb      	ldrh	r3, [r7, #12]
 80037b2:	3bc8      	subs	r3, #200	; 0xc8
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fe89 	bl	80004cc <__aeabi_i2d>
 80037ba:	a30d      	add	r3, pc, #52	; (adr r3, 80037f0 <get_Pen_XY+0x90>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f7fc feee 	bl	80005a0 <__aeabi_dmul>
 80037c4:	4603      	mov	r3, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	4618      	mov	r0, r3
 80037ca:	4621      	mov	r1, r4
 80037cc:	f7fd f8fa 	bl	80009c4 <__aeabi_d2uiz>
 80037d0:	4603      	mov	r3, r0
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	801a      	strh	r2, [r3, #0]
		return 1;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <get_Pen_XY+0x7e>
	}
	return 0;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	bf00      	nop
 80037e8:	d94109b0 	.word	0xd94109b0
 80037ec:	3fb09afb 	.word	0x3fb09afb
 80037f0:	77016240 	.word	0x77016240
 80037f4:	3fb623fa 	.word	0x3fb623fa
 80037f8:	40011c08 	.word	0x40011c08

080037fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08e      	sub	sp, #56	; 0x38
 8003800:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */

	JTAG_Set(1);
 8003802:	2001      	movs	r0, #1
 8003804:	f7fd fb7c 	bl	8000f00 <JTAG_Set>
	RCC_INIT(9);
 8003808:	2009      	movs	r0, #9
 800380a:	f7fd fc09 	bl	8001020 <RCC_INIT>
	sysTick_Set();
 800380e:	f7fd fb9d 	bl	8000f4c <sysTick_Set>
  /* USER CODE BEGIN 2 */

//  extern Word_Module WordTable[];
//  extern uint8_t CharTable[][17];

  LCD_Init();
 8003812:	f7fd fdbf 	bl	8001394 <LCD_Init>
  clearScreen(0x0000);
 8003816:	2000      	movs	r0, #0
 8003818:	f7fd fef7 	bl	800160a <clearScreen>
  TOUCH_GPIO_Init();
 800381c:	f7ff fd9a 	bl	8003354 <TOUCH_GPIO_Init>
  delay_us(100);					//这条语句可以让delay_us这个函数被编译
 8003820:	2064      	movs	r0, #100	; 0x64
 8003822:	f7fd fd2f 	bl	8001284 <delay_us>
//  while(NRF24L01_Check());
//
//  NRF24L01_TX_Mode();


  for(int i=0;i<1024;i++){
 8003826:	2300      	movs	r3, #0
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
 800382a:	e010      	b.n	800384e <main+0x52>
	  tbuf[i]=i%128;
 800382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382e:	425a      	negs	r2, r3
 8003830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003834:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003838:	bf58      	it	pl
 800383a:	4253      	negpl	r3, r2
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <main+0x98>)
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	4413      	add	r3, r2
 8003844:	460a      	mov	r2, r1
 8003846:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<1024;i++){
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	3301      	adds	r3, #1
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
 800384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	dbea      	blt.n	800382c <main+0x30>
  }

	my_mem_init(SRAMIN);		//初始化内部内存池
 8003856:	2000      	movs	r0, #0
 8003858:	f7fe fc5a 	bl	8002110 <my_mem_init>


// 	printMultiString(0, 120, "你好骚啊，Cal。", 0xffff, 0x0000);


 	delay_ms(100);
 800385c:	2064      	movs	r0, #100	; 0x64
 800385e:	f7fd fd27 	bl	80012b0 <delay_ms>



// 	while(1);

 	dir.dir="1:/";
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <main+0x9c>)
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <main+0xa0>)
 8003866:	63da      	str	r2, [r3, #60]	; 0x3c



// 	delay_ms(10000);

  GUI_Menu01_Create(menu01_handler, 0);
 8003868:	2100      	movs	r1, #0
 800386a:	480d      	ldr	r0, [pc, #52]	; (80038a0 <main+0xa4>)
 800386c:	f7ff f8ae 	bl	80029cc <GUI_Menu01_Create>

//  int32_t i=0;

  extern uint8_t menu_flag;
  menu_flag=1;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <main+0xa8>)
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]

  uint8_t buf[32]={0};
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	2220      	movs	r2, #32
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f8f9 	bl	8003a74 <memset>
//	  i++;

//	  ScreenScan();
//	  Button_dothings();
//	  GUI_Menu01_Scan();
	  Menu01_loop();
 8003882:	f7ff f9db 	bl	8002c3c <Menu01_loop>
	  Menu02_loop();
 8003886:	f7ff fb01 	bl	8002e8c <Menu02_loop>

	  NRF24L01_TxPacket(buf);
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fb95 	bl	8002fbc <NRF24L01_TxPacket>
	  Menu01_loop();
 8003892:	e7f6      	b.n	8003882 <main+0x86>
 8003894:	200009d4 	.word	0x200009d4
 8003898:	20005c60 	.word	0x20005c60
 800389c:	08003af4 	.word	0x08003af4
 80038a0:	08002205 	.word	0x08002205
 80038a4:	200009c9 	.word	0x200009c9

080038a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <HardFault_Handler+0x4>

080038ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <MemManage_Handler+0x4>

080038c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c4:	e7fe      	b.n	80038c4 <BusFault_Handler+0x4>

080038c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ca:	e7fe      	b.n	80038ca <UsageFault_Handler+0x4>

080038cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f4:	f000 f85c 	bl	80039b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <SystemInit+0x5c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <SystemInit+0x5c>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <SystemInit+0x5c>)
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4911      	ldr	r1, [pc, #68]	; (8003958 <SystemInit+0x5c>)
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <SystemInit+0x60>)
 8003914:	4013      	ands	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <SystemInit+0x5c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <SystemInit+0x5c>)
 800391e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003926:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <SystemInit+0x5c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <SystemInit+0x5c>)
 800392e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003932:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <SystemInit+0x5c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a07      	ldr	r2, [pc, #28]	; (8003958 <SystemInit+0x5c>)
 800393a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800393e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <SystemInit+0x5c>)
 8003942:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003946:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <SystemInit+0x64>)
 800394a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800394e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40021000 	.word	0x40021000
 800395c:	f8ff0000 	.word	0xf8ff0000
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003964:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003966:	e003      	b.n	8003970 <LoopCopyDataInit>

08003968 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800396a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800396c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800396e:	3104      	adds	r1, #4

08003970 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003970:	480a      	ldr	r0, [pc, #40]	; (800399c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003974:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003976:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003978:	d3f6      	bcc.n	8003968 <CopyDataInit>
  ldr r2, =_sbss
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800397c:	e002      	b.n	8003984 <LoopFillZerobss>

0800397e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800397e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003980:	f842 3b04 	str.w	r3, [r2], #4

08003984 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003986:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003988:	d3f9      	bcc.n	800397e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800398a:	f7ff ffb7 	bl	80038fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800398e:	f000 f84d 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003992:	f7ff ff33 	bl	80037fc <main>
  bx lr
 8003996:	4770      	bx	lr
  ldr r3, =_sidata
 8003998:	08003b58 	.word	0x08003b58
  ldr r0, =_sdata
 800399c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80039a0:	20000680 	.word	0x20000680
  ldr r2, =_sbss
 80039a4:	20000680 	.word	0x20000680
  ldr r3, = _ebss
 80039a8:	20005cb4 	.word	0x20005cb4

080039ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <ADC1_2_IRQHandler>
	...

080039b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_IncTick+0x1c>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_IncTick+0x20>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4413      	add	r3, r2
 80039c0:	4a03      	ldr	r2, [pc, #12]	; (80039d0 <HAL_IncTick+0x20>)
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	2000067c 	.word	0x2000067c
 80039d0:	20005cb0 	.word	0x20005cb0

080039d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return uwTick;
 80039d8:	4b02      	ldr	r3, [pc, #8]	; (80039e4 <HAL_GetTick+0x10>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	20005cb0 	.word	0x20005cb0

080039e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_GetTick>
 80039f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a00:	d005      	beq.n	8003a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_Delay+0x40>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a0e:	bf00      	nop
 8003a10:	f7ff ffe0 	bl	80039d4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d8f7      	bhi.n	8003a10 <HAL_Delay+0x28>
  {
  }
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	2000067c 	.word	0x2000067c

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	2500      	movs	r5, #0
 8003a30:	4e0c      	ldr	r6, [pc, #48]	; (8003a64 <__libc_init_array+0x38>)
 8003a32:	4c0d      	ldr	r4, [pc, #52]	; (8003a68 <__libc_init_array+0x3c>)
 8003a34:	1ba4      	subs	r4, r4, r6
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	42a5      	cmp	r5, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	f000 f822 	bl	8003a84 <_init>
 8003a40:	2500      	movs	r5, #0
 8003a42:	4e0a      	ldr	r6, [pc, #40]	; (8003a6c <__libc_init_array+0x40>)
 8003a44:	4c0a      	ldr	r4, [pc, #40]	; (8003a70 <__libc_init_array+0x44>)
 8003a46:	1ba4      	subs	r4, r4, r6
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	42a5      	cmp	r5, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a54:	4798      	blx	r3
 8003a56:	3501      	adds	r5, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a5e:	4798      	blx	r3
 8003a60:	3501      	adds	r5, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08003b50 	.word	0x08003b50
 8003a68:	08003b50 	.word	0x08003b50
 8003a6c:	08003b50 	.word	0x08003b50
 8003a70:	08003b54 	.word	0x08003b54

08003a74 <memset>:
 8003a74:	4603      	mov	r3, r0
 8003a76:	4402      	add	r2, r0
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d100      	bne.n	8003a7e <memset+0xa>
 8003a7c:	4770      	bx	lr
 8003a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a82:	e7f9      	b.n	8003a78 <memset+0x4>

08003a84 <_init>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr

08003a90 <_fini>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	bf00      	nop
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr
